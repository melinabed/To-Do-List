(()=>{"use strict";function e(){document.getElementById("add-todo-form").style.display=""}function t(){const e=document.getElementById("add-notes").value;if(""!==e){const t=document.querySelector(".notes-ul"),n=document.createElement("li");n.textContent=e;const r=document.createElement("span");r.className="remove-notes-item";const o=document.createTextNode("×");if(n.appendChild(r),r.appendChild(o),t.appendChild(n),document.getElementById("add-notes").value="",document.querySelectorAll("li").length>0){console.log("inside module if...",document.querySelectorAll("li").length);const e=document.querySelectorAll("li");console.log(e),e.forEach((e=>{e.addEventListener("click",(function(){e.remove()}))}))}}}function n(){const e=document.querySelectorAll("li");for(let t=0;t<e.length;t++)e[t].remove();document.getElementById("add-todo").reset()}Math.pow(10,8);var r=36e5;function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e,t){var n;o(1,arguments);var a=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var g,p=function(e){var t,n={},r=e.split(i.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],i.timeZoneDelimiter.test(n.date)&&(n.date=e.split(i.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=i.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}(e);if(p.date){var y=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(p.date,a);g=function(e,t){if(null===t)return new Date(NaN);var n=e.match(l);if(!n)return new Date(NaN);var r=!!n[4],o=d(n[1]),a=d(n[2])-1,i=d(n[3]),u=d(n[4]),c=d(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,u,c)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,u,c):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(m[t]||(f(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(f(e)?366:365)}(t,o)?(s.setUTCFullYear(t,a,Math.max(o,i)),s):new Date(NaN)}(y.restDateString,y.year)}if(!g||isNaN(g.getTime()))return new Date(NaN);var v,h=g.getTime(),N=0;if(p.time&&(N=function(e){var t=e.match(u);if(!t)return NaN;var n=s(t[1]),o=s(t[2]),a=s(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,o,a)?n*r+6e4*o+1e3*a:NaN}(p.time),isNaN(N)))return new Date(NaN);if(!p.timezone){var D=new Date(h+N),b=new Date(0);return b.setFullYear(D.getUTCFullYear(),D.getUTCMonth(),D.getUTCDate()),b.setHours(D.getUTCHours(),D.getUTCMinutes(),D.getUTCSeconds(),D.getUTCMilliseconds()),b}return v=function(e){if("Z"===e)return 0;var t=e.match(c);if(!t)return 0;var n="+"===t[1]?-1:1,o=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(o*r+6e4*a):NaN}(p.timezone),isNaN(v)?new Date(NaN):new Date(h+N+v)}var i={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},l=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,c=/^([+-])(\d{2})(?::?(\d{2}))?$/;function d(e){return e?parseInt(e):1}function s(e){return e&&parseFloat(e.replace(",","."))||0}var m=[31,null,31,30,31,30,31,31,30,31,30,31];function f(e){return e%400==0||e%4==0&&e%100!=0}function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function p(){return function(e){o(1,arguments);var t=function(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===g(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return t.setHours(0,0,0,0),t}(Date.now())}let y=[];const v=()=>{let e=document.getElementById("title").value,t=document.getElementById("list-type").value,r=document.getElementById("duedate").value,o=document.getElementById("priority").value;if(""==e||""==r)return void alert("Title, notes, and due date are required fields, please try again");if(a(r)<p())return alert("you have entered a date that has already passed! please enter a date greater than that."),console.log("due date",a(r)),void console.log("date now",p());const i=document.querySelectorAll("li");let l=[];for(let e=0;e<i.length;e++){let t=i[e].textContent.replace("×","");l.push(t)}let u=l.join(", ");return console.log("called createToDO module.. creating todo now"),console.log({title:e,notes:u,dueDate:r,priority:o,listType:t}),console.log("pushing this object to the toDo array..."),y.push({title:e,notes:u,dueDate:r,priority:o,listType:t}),console.log(y),n(),{title:e,notes:u,dueDate:r,priority:o,listType:t}};(()=>{console.log("testing");let e=[];console.log("pushing title of project");e.push({projectTitle:"Default project"}),console.log(e)})(),document.querySelector(".add-todo-button").addEventListener("click",e),document.querySelector(".add-notes").addEventListener("click",t),document.querySelector(".reset-button").addEventListener("click",n),document.querySelector(".submit-button").addEventListener("click",v)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,