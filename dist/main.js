(()=>{"use strict";function e(){document.getElementById("add-todo-form").style.display="",document.querySelector(".add-todo-button").style.visibility="hidden"}function t(){const e=document.getElementById("add-notes").value;if(""!==e){const t=document.querySelector(".notes-ul"),n=document.createElement("li");n.textContent=e;const o=document.createElement("span");o.className="remove-notes-item";const l=document.createTextNode("×");if(n.appendChild(o),o.appendChild(l),t.appendChild(n),document.getElementById("add-notes").value="",document.querySelectorAll("li").length>0){console.log("inside module if...",document.querySelectorAll("li").length);const e=document.querySelectorAll("li");console.log(e),e.forEach((e=>{e.addEventListener("click",(function(){e.remove()}))}))}}}function n(){const e=document.querySelectorAll(".form-li");for(let t=0;t<e.length;t++)e[t].remove();document.getElementById("add-todo").reset()}function o(){let e=localStorage.getItem("Title"),t=localStorage.getItem("List-Type"),n=localStorage.getItem("DueDate"),o=localStorage.getItem("Priority"),l=localStorage.getItem("Notes");if(null==e||null==t||null==n||null==o)return;const r=document.querySelectorAll(".card");for(let e=0;e<r.length;e++)r[e].remove();console.log("display to screen");const a=document.querySelector(".projects"),i=document.createElement("div");i.classList.add("card"),a.appendChild(i);const c=document.createElement("button");c.classList.add("remove-todo-button"),c.textContent="Delete/Complete ToDo",i.appendChild(c),c.addEventListener("click",(function(){i.remove(),localStorage.clear()}));let u={title:e,notes:l,dueDate:n,priority:o,listType:t};console.log(u);for(let e in u){console.log(`${e}: ${u[e]}`);const t=document.createElement("p");t.textContent=`${e}: ${u[e]}`,i.appendChild(t)}const s=document.querySelectorAll("p"),d=document.createElement("p");d.textContent="Checklist Items (Click item when completed):";const m=document.createElement("ul");d.classList.add("notes-list-label"),s[s.length-1].appendChild(m),m.appendChild(d),console.log("show me the contents of notelist from local storage...",l);let g=l.split(",");if(console.log("contents of temp noteslistarray",g),""!==l){for(let e=0;e<g.length;e++){console.log(g[e]);const t=document.createElement("li");t.className="display-li",t.textContent=g[e],t.addEventListener("click",(function(){t.classList.toggle("done")?localStorage.setItem(t.textContent,"true"):t.classList.toggle("display-li")&&localStorage.setItem(t.textContent,"false")})),m.appendChild(t)}window.onload=function(){document.querySelectorAll("display-li").forEach((e=>{"true"==localStorage.getItem(e.textContent)&&(console.log("inside the onload if..."),e.className="done")}))}}}Math.pow(10,8);var l=36e5;function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e,t){var n;r(1,arguments);var o=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,f=function(e){var t,n={},o=e.split(i.dateTimeDelimiter);if(o.length>2)return n;if(/:/.test(o[0])?t=o[0]:(n.date=o[0],t=o[1],i.timeZoneDelimiter.test(n.date)&&(n.date=e.split(i.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var l=i.timezone.exec(t);l?(n.time=t.replace(l[1],""),n.timezone=l[1]):n.time=t}return n}(e);if(f.date){var y=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),o=e.match(n);if(!o)return{year:NaN,restDateString:""};var l=o[1]?parseInt(o[1]):null,r=o[2]?parseInt(o[2]):null;return{year:null===r?l:100*r,restDateString:e.slice((o[1]||o[2]).length)}}(f.date,o);a=function(e,t){if(null===t)return new Date(NaN);var n=e.match(c);if(!n)return new Date(NaN);var o=!!n[4],l=d(n[1]),r=d(n[2])-1,a=d(n[3]),i=d(n[4]),u=d(n[5])-1;if(o)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,i,u)?function(e,t,n){var o=new Date(0);o.setUTCFullYear(e,0,4);var l=7*(t-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+l),o}(t,i,u):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(g[t]||(p(e)?29:28))}(t,r,a)&&function(e,t){return t>=1&&t<=(p(e)?366:365)}(t,l)?(s.setUTCFullYear(t,r,Math.max(l,a)),s):new Date(NaN)}(y.restDateString,y.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var v,h=a.getTime(),D=0;if(f.time&&(D=function(e){var t=e.match(u);if(!t)return NaN;var n=m(t[1]),o=m(t[2]),r=m(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,o,r)?n*l+6e4*o+1e3*r:NaN}(f.time),isNaN(D)))return new Date(NaN);if(!f.timezone){var N=new Date(h+D),S=new Date(0);return S.setFullYear(N.getUTCFullYear(),N.getUTCMonth(),N.getUTCDate()),S.setHours(N.getUTCHours(),N.getUTCMinutes(),N.getUTCSeconds(),N.getUTCMilliseconds()),S}return v=function(e){if("Z"===e)return 0;var t=e.match(s);if(!t)return 0;var n="+"===t[1]?-1:1,o=parseInt(t[2]),r=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,r)?n*(o*l+6e4*r):NaN}(f.timezone),isNaN(v)?new Date(NaN):new Date(h+D+v)}var i={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},c=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,s=/^([+-])(\d{2})(?::?(\d{2}))?$/;function d(e){return e?parseInt(e):1}function m(e){return e&&parseFloat(e.replace(",","."))||0}var g=[31,null,31,30,31,30,31,31,30,31,30,31];function p(e){return e%400==0||e%4==0&&e%100!=0}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function y(){return function(e){r(1,arguments);var t=function(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===f(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return t.setHours(0,0,0,0),t}(Date.now())}let v=[];const h=()=>{let e=document.getElementById("title").value,t=document.getElementById("list-type").value,l=document.getElementById("duedate").value,r=document.getElementById("priority").value;if(""==e||""==l)return void alert("Title, Notes, and Due Date are required fields, please try again!");if(a(l)<y())return alert("You have entered a date that has already passed! Please enter a date greater than that."),console.log("due date",a(l)),void console.log("date now",y());const i=document.querySelectorAll(".form-li");let c=[];for(let e=0;e<i.length;e++){let t=i[e].textContent.replace("×","");c.push(t)}let u=c.join(", ");return console.log("called createToDO module.. creating todo now"),console.log({title:e,notes:u,dueDate:l,priority:r,listType:t}),console.log("pushing this object to the toDo array..."),v.push({title:e,notes:u,dueDate:l,priority:r,listType:t}),console.log(v),function({title:e,dueDate:t,priority:n,listType:l},r){console.log("saving object to local storage"),localStorage.setItem("Title",document.getElementById("title").value),localStorage.setItem("List-Type",document.getElementById("list-type").value),localStorage.setItem("DueDate",document.getElementById("duedate").value),localStorage.setItem("Priority",document.getElementById("priority").value),localStorage.setItem("Notes",r),o()}({title:e,dueDate:l,priority:r,listType:t},u),n(),u};(()=>{console.log("testing");let e=[];console.log("pushing title of project");e.push({projectTitle:"Default project"}),console.log(e)})(),o(),document.querySelector(".add-todo-button").addEventListener("click",e),document.querySelector(".add-notes").addEventListener("click",t),document.querySelector(".reset-button").addEventListener("click",n),document.querySelector(".submit-button").addEventListener("click",h)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBVU8sU0FBU0EsSUFDWkMsU0FBU0MsZUFBZSxpQkFBaUJDLE1BQU1DLFFBQVUsR0FDMUNILFNBQVNJLGNBQWMsb0JBQy9CRixNQUFNRyxXQUFhLFFBQzlCLENBRU8sU0FBU0MsSUFDWixNQUFNQyxFQUFVUCxTQUFTQyxlQUFlLGFBQWFPLE1BS3JELEdBQWdCLEtBQVpELEVBQWdCLENBQ2hCLE1BQU1FLEVBQUtULFNBQVNJLGNBQWMsYUFDNUJNLEVBQUtWLFNBQVNXLGNBQWMsTUFDbENELEVBQUdFLFlBQWNMLEVBQ2pCLE1BQU1NLEVBQU9iLFNBQVNXLGNBQWMsUUFDcENFLEVBQUtDLFVBQVksb0JBQ2pCLE1BQU1DLEVBQWFmLFNBQVNnQixlQUFlLEtBTzNDLEdBTkFOLEVBQUdPLFlBQVlKLEdBQ2ZBLEVBQUtJLFlBQVlGLEdBQ2pCTixFQUFHUSxZQUFZUCxHQUNmVixTQUFTQyxlQUFlLGFBQWFPLE1BQVEsR0FHekNSLFNBQVNrQixpQkFBaUIsTUFBTUMsT0FBUyxFQUFHLENBQzVDQyxRQUFRQyxJQUFJLHNCQUF1QnJCLFNBQVNrQixpQkFBaUIsTUFBTUMsUUFDbkUsTUFBTUcsRUFBZ0J0QixTQUFTa0IsaUJBQWlCLE1BQ2hERSxRQUFRQyxJQUFJQyxHQUdaQSxFQUFjQyxTQUFRQyxJQUNsQkEsRUFBZUMsaUJBQWlCLFNBQVMsV0FDckNELEVBQWVFLFFBQ25CLEdBQUUsR0FHVixDQUNKLENBQ0osQ0FFTyxTQUFTQyxJQUNaLE1BQU1MLEVBQWdCdEIsU0FBU2tCLGlCQUFpQixZQUNoRCxJQUFLLElBQUlVLEVBQUksRUFBR0EsRUFBSU4sRUFBY0gsT0FBUVMsSUFDdENOLEVBQWNNLEdBQUdGLFNBRXJCMUIsU0FBU0MsZUFBZSxZQUFZNEIsT0FDeEMsQ0FFTyxTQUFTQyxJQUdaLElBQUlDLEVBQVFDLGFBQWFDLFFBQVEsU0FDN0JDLEVBQVdGLGFBQWFDLFFBQVEsYUFDaENFLEVBQVVILGFBQWFDLFFBQVEsV0FDL0JHLEVBQVdKLGFBQWFDLFFBQVEsWUFDaENJLEVBQVFMLGFBQWFDLFFBQVEsU0FHakMsR0FBYSxNQUFURixHQUE2QixNQUFaRyxHQUErQixNQUFYQyxHQUErQixNQUFaQyxFQUN4RCxPQUlKLE1BQU1FLEVBQWF0QyxTQUFTa0IsaUJBQWlCLFNBQzdDLElBQUssSUFBSVUsRUFBSSxFQUFHQSxFQUFJVSxFQUFXbkIsT0FBUVMsSUFDbkNVLEVBQVdWLEdBQUdGLFNBSWxCTixRQUFRQyxJQUFJLHFCQUNaLE1BQU1rQixFQUFXdkMsU0FBU0ksY0FBYyxhQUNsQ29DLEVBQU94QyxTQUFTVyxjQUFjLE9BQ3BDNkIsRUFBS0MsVUFBVUMsSUFBSSxRQUNuQkgsRUFBU3RCLFlBQVl1QixHQUdyQixNQUFNRyxFQUFtQjNDLFNBQVNXLGNBQWMsVUFDaERnQyxFQUFpQkYsVUFBVUMsSUFBSSxzQkFDL0JDLEVBQWlCL0IsWUFBYyx1QkFDL0I0QixFQUFLdkIsWUFBWTBCLEdBQ2pCQSxFQUFpQmxCLGlCQUFpQixTQUFTLFdBQ3ZDZSxFQUFLZCxTQUNMTSxhQUFhWSxPQUNqQixJQUlBLElBQUlDLEVBQWdCLENBQUNkLFFBQU9NLFFBQU9GLFVBQVNDLFdBQVVGLFlBQ3REZCxRQUFRQyxJQUFJd0IsR0FFWixJQUFLLElBQUlDLEtBQU9ELEVBQWUsQ0FDM0J6QixRQUFRQyxJQUFJLEdBQUd5QixNQUFRRCxFQUFjQyxNQUNyQyxNQUFNQyxFQUFPL0MsU0FBU1csY0FBYyxLQUNwQ29DLEVBQUtuQyxZQUFjLEdBQUlrQyxNQUFRRCxFQUFjQyxLQUM3Q04sRUFBS3ZCLFlBQVk4QixFQUNyQixDQUVBLE1BQU1BLEVBQU8vQyxTQUFTa0IsaUJBQWlCLEtBQ2pDOEIsRUFBaUJoRCxTQUFTVyxjQUFjLEtBQzlDcUMsRUFBZXBDLFlBQWMsK0NBQzdCLE1BQU1ILEVBQUtULFNBQVNXLGNBQWMsTUFDbENxQyxFQUFlUCxVQUFVQyxJQUFJLG9CQUM3QkssRUFBS0EsRUFBSzVCLE9BQVMsR0FBR0YsWUFBWVIsR0FDbENBLEVBQUdRLFlBQVkrQixHQUVmNUIsUUFBUUMsSUFBSSx5REFBMERnQixHQUN0RSxJQUFJWSxFQUFrQlosRUFBTWEsTUFBTSxLQUdsQyxHQUZBOUIsUUFBUUMsSUFBSSxrQ0FBbUM0QixHQUVqQyxLQUFWWixFQUFKLENBRUksSUFBSyxJQUFJVCxFQUFJLEVBQUdBLEVBQUlxQixFQUFnQjlCLE9BQVFTLElBQUssQ0FDN0NSLFFBQVFDLElBQUk0QixFQUFnQnJCLElBQzVCLE1BQU1sQixFQUFLVixTQUFTVyxjQUFjLE1BQ2xDRCxFQUFHSSxVQUFZLGFBQ2ZKLEVBQUdFLFlBQWNxQyxFQUFnQnJCLEdBR2pDbEIsRUFBR2UsaUJBQWlCLFNBQVMsV0FDckJmLEVBQUcrQixVQUFVVSxPQUFPLFFBQ3BCbkIsYUFBYW9CLFFBQVExQyxFQUFHRSxZQUFhLFFBQzlCRixFQUFHK0IsVUFBVVUsT0FBTyxlQUMzQm5CLGFBQWFvQixRQUFRMUMsRUFBR0UsWUFBYSxRQUU3QyxJQUNBSCxFQUFHUSxZQUFZUCxFQUNuQixDQUlKMkMsT0FBT0MsT0FBUyxXQUdJdEQsU0FBU2tCLGlCQUFpQixjQUNsQ0ssU0FBUWdDLElBQ29DLFFBQTVDdkIsYUFBYUMsUUFBUXNCLEVBQU8zQyxlQUM1QlEsUUFBUUMsSUFBSSwyQkFDWmtDLEVBQU96QyxVQUFZLE9BQ3ZCLEdBRVIsQ0FiYSxDQWVqQixDQ3pIcUIwQyxLQUFLQyxJQUFJLEdBQUksR0F4QjNCLElBNENJQyxFQUFxQixLQ3BEakIsU0FBU0MsRUFBYUMsRUFBVUMsR0FDN0MsR0FBSUEsRUFBSzFDLE9BQVN5QyxFQUNoQixNQUFNLElBQUlFLFVBQVVGLEVBQVcsYUFBZUEsRUFBVyxFQUFJLElBQU0sSUFBTSx1QkFBeUJDLEVBQUsxQyxPQUFTLFdBRXBILENDK0JlLFNBQVM0QyxFQUFTQyxFQUFVQyxHQUN6QyxJQUFJQyxFQUNKUCxFQUFhLEVBQUdRLFdBQ2hCLElBQUlDLEVDdENTLFNBQW1CQyxHQUNoQyxHQUFvQixPQUFoQkEsSUFBd0MsSUFBaEJBLElBQXdDLElBQWhCQSxFQUNsRCxPQUFPQyxJQUVULElBQUlDLEVBQVNDLE9BQU9ILEdBQ3BCLE9BQUlJLE1BQU1GLEdBQ0RBLEVBRUZBLEVBQVMsRUFBSWYsS0FBS2tCLEtBQUtILEdBQVVmLEtBQUttQixNQUFNSixFQUNyRCxDRDZCeUJLLENBQW1ILFFBQXhHVixFQUF3QkQsYUFBeUMsRUFBU0EsRUFBUUcsd0JBQXdELElBQTFCRixFQUFtQ0EsRUFBd0IsR0FDN00sR0FBeUIsSUFBckJFLEdBQStDLElBQXJCQSxHQUErQyxJQUFyQkEsRUFDdEQsTUFBTSxJQUFJUyxXQUFXLHNDQUV2QixHQUEwQixpQkFBYmIsR0FBc0Usb0JBQTdDYyxPQUFPQyxVQUFVQyxTQUFTQyxLQUFLakIsR0FDbkUsT0FBTyxJQUFJa0IsS0FBS1osS0FFbEIsSUFDSWEsRUFEQUMsRUE2Q04sU0FBeUJDLEdBQ3ZCLElBRUlDLEVBRkFGLEVBQWMsQ0FBQyxFQUNmRyxFQUFRRixFQUFXbkMsTUFBTXNDLEVBQVNDLG1CQUt0QyxHQUFJRixFQUFNcEUsT0FBUyxFQUNqQixPQUFPaUUsRUFZVCxHQVZJLElBQUlNLEtBQUtILEVBQU0sSUFDakJELEVBQWFDLEVBQU0sSUFFbkJILEVBQVlELEtBQU9JLEVBQU0sR0FDekJELEVBQWFDLEVBQU0sR0FDZkMsRUFBU0csa0JBQWtCRCxLQUFLTixFQUFZRCxRQUM5Q0MsRUFBWUQsS0FBT0UsRUFBV25DLE1BQU1zQyxFQUFTRyxtQkFBbUIsR0FDaEVMLEVBQWFELEVBQVdPLE9BQU9SLEVBQVlELEtBQUtoRSxPQUFRa0UsRUFBV2xFLFVBR25FbUUsRUFBWSxDQUNkLElBQUlPLEVBQVFMLEVBQVNNLFNBQVNDLEtBQUtULEdBQy9CTyxHQUNGVCxFQUFZWSxLQUFPVixFQUFXVyxRQUFRSixFQUFNLEdBQUksSUFDaERULEVBQVlVLFNBQVdELEVBQU0sSUFFN0JULEVBQVlZLEtBQU9WLENBRXZCLENBQ0EsT0FBT0YsQ0FDVCxDQTNFb0JjLENBQWdCbEMsR0FFbEMsR0FBSW9CLEVBQVlELEtBQU0sQ0FDcEIsSUFBSWdCLEVBeUVSLFNBQW1CZCxFQUFZakIsR0FDN0IsSUFBSWdDLEVBQVEsSUFBSUMsT0FBTyx3QkFBMEIsRUFBSWpDLEdBQW9CLHVCQUF5QixFQUFJQSxHQUFvQixRQUN0SGtDLEVBQVdqQixFQUFXa0IsTUFBTUgsR0FFaEMsSUFBS0UsRUFBVSxNQUFPLENBQ3BCRSxLQUFNbEMsSUFDTm1DLGVBQWdCLElBRWxCLElBQUlELEVBQU9GLEVBQVMsR0FBS0ksU0FBU0osRUFBUyxJQUFNLEtBQzdDSyxFQUFVTCxFQUFTLEdBQUtJLFNBQVNKLEVBQVMsSUFBTSxLQUdwRCxNQUFPLENBQ0xFLEtBQWtCLE9BQVpHLEVBQW1CSCxFQUFpQixJQUFWRyxFQUNoQ0YsZUFBZ0JwQixFQUFXdUIsT0FBT04sRUFBUyxJQUFNQSxFQUFTLElBQUluRixRQUVsRSxDQXpGMEIwRixDQUFVekIsRUFBWUQsS0FBTWYsR0FDbERlLEVBeUZKLFNBQW1CRSxFQUFZbUIsR0FFN0IsR0FBYSxPQUFUQSxFQUFlLE9BQU8sSUFBSXRCLEtBQUtaLEtBQ25DLElBQUlnQyxFQUFXakIsRUFBV2tCLE1BQU1PLEdBRWhDLElBQUtSLEVBQVUsT0FBTyxJQUFJcEIsS0FBS1osS0FDL0IsSUFBSXlDLElBQWVULEVBQVMsR0FDeEJVLEVBQVlDLEVBQWNYLEVBQVMsSUFDbkNZLEVBQVFELEVBQWNYLEVBQVMsSUFBTSxFQUNyQ2EsRUFBTUYsRUFBY1gsRUFBUyxJQUM3QmMsRUFBT0gsRUFBY1gsRUFBUyxJQUM5QmUsRUFBWUosRUFBY1gsRUFBUyxJQUFNLEVBQzdDLEdBQUlTLEVBQ0YsT0FpRUosU0FBMEJPLEVBQU9GLEVBQU1ELEdBQ3JDLE9BQU9DLEdBQVEsR0FBS0EsR0FBUSxJQUFNRCxHQUFPLEdBQUtBLEdBQU8sQ0FDdkQsQ0FuRVNJLENBQWlCZixFQUFNWSxFQUFNQyxHQTJDdEMsU0FBMEJHLEVBQWFKLEVBQU1ELEdBQzNDLElBQUloQyxFQUFPLElBQUlELEtBQUssR0FDcEJDLEVBQUtzQyxlQUFlRCxFQUFhLEVBQUcsR0FDcEMsSUFDSUUsRUFBb0IsR0FBWk4sRUFBTyxHQUFTRCxFQUFNLEdBRFRoQyxFQUFLd0MsYUFBZSxHQUc3QyxPQURBeEMsRUFBS3lDLFdBQVd6QyxFQUFLMEMsYUFBZUgsR0FDN0J2QyxDQUNULENBL0NXMkMsQ0FBaUJ0QixFQUFNWSxFQUFNQyxHQUYzQixJQUFJbkMsS0FBS1osS0FJbEIsSUFBSWEsRUFBTyxJQUFJRCxLQUFLLEdBQ3BCLE9BcURKLFNBQXNCc0IsRUFBTVUsRUFBTy9CLEdBQ2pDLE9BQU8rQixHQUFTLEdBQUtBLEdBQVMsSUFBTS9CLEdBQVEsR0FBS0EsSUFBUzRDLEVBQWFiLEtBQVdjLEVBQWdCeEIsR0FBUSxHQUFLLElBQ2pILENBdkRTeUIsQ0FBYXpCLEVBQU1VLEVBQU9DLElBd0RuQyxTQUErQlgsRUFBTVEsR0FDbkMsT0FBT0EsR0FBYSxHQUFLQSxJQUFjZ0IsRUFBZ0J4QixHQUFRLElBQU0sSUFDdkUsQ0ExRDRDMEIsQ0FBc0IxQixFQUFNUSxJQUdwRTdCLEVBQUtzQyxlQUFlakIsRUFBTVUsRUFBTzFELEtBQUsyRSxJQUFJbkIsRUFBV0csSUFDOUNoQyxHQUhFLElBQUlELEtBQUtaLElBS3RCLENBbEhXOEQsQ0FBVWpDLEVBQWdCTSxlQUFnQk4sRUFBZ0JLLEtBQ25FLENBQ0EsSUFBS3JCLEdBQVFWLE1BQU1VLEVBQUtrRCxXQUN0QixPQUFPLElBQUluRCxLQUFLWixLQUVsQixJQUVJZ0UsRUFGQUMsRUFBWXBELEVBQUtrRCxVQUNqQnJDLEVBQU8sRUFFWCxHQUFJWixFQUFZWSxPQUNkQSxFQTZHSixTQUFtQlYsR0FDakIsSUFBSWdCLEVBQVdoQixFQUFXaUIsTUFBTWlDLEdBQ2hDLElBQUtsQyxFQUFVLE9BQU9oQyxJQUV0QixJQUFJbUUsRUFBUUMsRUFBY3BDLEVBQVMsSUFDL0JxQyxFQUFVRCxFQUFjcEMsRUFBUyxJQUNqQ3NDLEVBQVVGLEVBQWNwQyxFQUFTLElBQ3JDLE9BNkNGLFNBQXNCbUMsRUFBT0UsRUFBU0MsR0FDcEMsT0FBYyxLQUFWSCxFQUNpQixJQUFaRSxHQUE2QixJQUFaQyxFQUVuQkEsR0FBVyxHQUFLQSxFQUFVLElBQU1ELEdBQVcsR0FBS0EsRUFBVSxJQUFNRixHQUFTLEdBQUtBLEVBQVEsRUFDL0YsQ0FsRE9JLENBQWFKLEVBQU9FLEVBQVNDLEdBRzNCSCxFQUFRL0UsRUZ2SWlCLElFdUlJaUYsRUFBMkMsSUFBVkMsRUFGNUR0RSxHQUdYLENBeEhXd0UsQ0FBVTFELEVBQVlZLE1BQ3pCdkIsTUFBTXVCLElBQ1IsT0FBTyxJQUFJZCxLQUFLWixLQUdwQixJQUFJYyxFQUFZVSxTQUtULENBQ0wsSUFBSWlELEVBQVksSUFBSTdELEtBQUtxRCxFQUFZdkMsR0FNakNnRCxFQUFTLElBQUk5RCxLQUFLLEdBR3RCLE9BRkE4RCxFQUFPQyxZQUFZRixFQUFVRyxpQkFBa0JILEVBQVVJLGNBQWVKLEVBQVVsQixjQUNsRm1CLEVBQU9JLFNBQVNMLEVBQVVNLGNBQWVOLEVBQVVPLGdCQUFpQlAsRUFBVVEsZ0JBQWlCUixFQUFVUyxzQkFDbEdSLENBQ1QsQ0FkRSxPQURBVixFQXNISixTQUF1Qm1CLEdBQ3JCLEdBQXVCLE1BQW5CQSxFQUF3QixPQUFPLEVBQ25DLElBQUluRCxFQUFXbUQsRUFBZWxELE1BQU1tRCxHQUNwQyxJQUFLcEQsRUFBVSxPQUFPLEVBQ3RCLElBQUlxRCxFQUF1QixNQUFoQnJELEVBQVMsSUFBYyxFQUFJLEVBQ2xDbUMsRUFBUS9CLFNBQVNKLEVBQVMsSUFDMUJxQyxFQUFVckMsRUFBUyxJQUFNSSxTQUFTSixFQUFTLEtBQU8sRUFDdEQsT0FvQ0YsU0FBMEJzRCxFQUFRakIsR0FDaEMsT0FBT0EsR0FBVyxHQUFLQSxHQUFXLEVBQ3BDLENBdENPa0IsQ0FBaUJwQixFQUFPRSxHQUd0QmdCLEdBQVFsQixFQUFRL0UsRUZ0SlMsSUVzSllpRixHQUZuQ3JFLEdBR1gsQ0FqSWF3RixDQUFjMUUsRUFBWVUsVUFDL0JyQixNQUFNNkQsR0FDRCxJQUFJcEQsS0FBS1osS0FjYixJQUFJWSxLQUFLcUQsRUFBWXZDLEVBQU9zQyxFQUNyQyxDQUNBLElBQUk5QyxFQUFXLENBQ2JDLGtCQUFtQixPQUNuQkUsa0JBQW1CLFFBQ25CRyxTQUFVLGNBRVJnQixFQUFZLGdFQUNaMEIsRUFBWSw0RUFDWmtCLEVBQWdCLGdDQTJFcEIsU0FBU3pDLEVBQWN6RyxHQUNyQixPQUFPQSxFQUFRa0csU0FBU2xHLEdBQVMsQ0FDbkMsQ0FhQSxTQUFTa0ksRUFBY2xJLEdBQ3JCLE9BQU9BLEdBQVN1SixXQUFXdkosRUFBTXlGLFFBQVEsSUFBSyxPQUFTLENBQ3pELENBeUJBLElBQUk4QixFQUFlLENBQUMsR0FBSSxLQUFNLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ2xFLFNBQVNDLEVBQWdCeEIsR0FDdkIsT0FBT0EsRUFBTyxLQUFRLEdBQUtBLEVBQU8sR0FBTSxHQUFLQSxFQUFPLEtBQVEsQ0FDOUQsQ0VqTmUsU0FBU3dELEVBQVFDLEdBRzlCLE9BQU9ELEVBQVUsbUJBQXFCRSxRQUFVLGlCQUFtQkEsT0FBT0MsU0FBVyxTQUFVRixHQUM3RixjQUFjQSxDQUNoQixFQUFJLFNBQVVBLEdBQ1osT0FBT0EsR0FBSyxtQkFBcUJDLFFBQVVELEVBQUVHLGNBQWdCRixRQUFVRCxJQUFNQyxPQUFPbkYsVUFBWSxnQkFBa0JrRixDQUNwSCxFQUFHRCxFQUFRQyxFQUNiLENDWWUsU0FBU0ksSUFDdEIsT0NEYSxTQUFvQnRCLEdBQ2pDcEYsRUFBYSxFQUFHUSxXQUNoQixJQUFJZ0IsRUNVUyxTQUFnQm5CLEdBQzdCTCxFQUFhLEVBQUdRLFdBQ2hCLElBQUltRyxFQUFTeEYsT0FBT0MsVUFBVUMsU0FBU0MsS0FBS2pCLEdBRzVDLE9BQUlBLGFBQW9Ca0IsTUFBOEIsV0FBdEI4RSxFQUFRaEcsSUFBcUMsa0JBQVhzRyxFQUV6RCxJQUFJcEYsS0FBS2xCLEVBQVNxRSxXQUNJLGlCQUFickUsR0FBb0Msb0JBQVhzRyxFQUNsQyxJQUFJcEYsS0FBS2xCLElBRVMsaUJBQWJBLEdBQW9DLG9CQUFYc0csR0FBb0Qsb0JBQVpsSixVQUUzRUEsUUFBUW1KLEtBQUssc05BRWJuSixRQUFRbUosTUFBSyxJQUFJQyxPQUFRQyxRQUVwQixJQUFJdkYsS0FBS1osS0FFcEIsQ0Q3QmFvRyxDQUFPM0IsR0FFbEIsT0FEQTVELEVBQUtpRSxTQUFTLEVBQUcsRUFBRyxFQUFHLEdBQ2hCakUsQ0FDVCxDREpTd0YsQ0FBV3pGLEtBQUswRixNQUN6QixDR2pCQSxJQUFJQyxFQUFZLEdBRVQsTUFBTUMsRUFBYSxLQUN0QixJQUFJL0ksRUFBUS9CLFNBQVNDLGVBQWUsU0FBU08sTUFDekMwQixFQUFXbEMsU0FBU0MsZUFBZSxhQUFhTyxNQUNoRDJCLEVBQVVuQyxTQUFTQyxlQUFlLFdBQVdPLE1BQzdDNEIsRUFBV3BDLFNBQVNDLGVBQWUsWUFBWU8sTUFHbkQsR0FBYSxJQUFUdUIsR0FBMEIsSUFBWEksRUFFZixZQURBNEksTUFBTSxxRUFJVixHQUFJaEgsRUFBUzVCLEdBQVdrSSxJQUlwQixPQUhBVSxNQUFNLDJGQUNOM0osUUFBUUMsSUFBSSxXQUFZMEMsRUFBUzVCLFNBQ2pDZixRQUFRQyxJQUFJLFdBQVlnSixLQUk1QixNQUFNL0ksRUFBZ0J0QixTQUFTa0IsaUJBQWlCLFlBQ2hELElBQUk4SixFQUFpQixHQUNyQixJQUFLLElBQUlwSixFQUFJLEVBQUdBLEVBQUlOLEVBQWNILE9BQVFTLElBQUssQ0FHM0MsSUFBSXFKLEVBQW9CM0osRUFBY00sR0FBR2hCLFlBQVlxRixRQUFRLElBQVUsSUFDdkUrRSxFQUFlRSxLQUFLRCxFQUN4QixDQUVBLElBQUk1SSxFQUFRMkksRUFBZUcsS0FBSyxNQWVoQyxPQWJBL0osUUFBUUMsSUFBSSxnREFDWkQsUUFBUUMsSUFBSSxDQUFDVSxRQUFPTSxRQUFPRixVQUFTQyxXQUFVRixhQUM5Q2QsUUFBUUMsSUFBSSw0Q0FFWndKLEVBQVVLLEtBQUssQ0FBQ25KLFFBQU9NLFFBQU9GLFVBQVNDLFdBQVVGLGFBQ2pEZCxRQUFRQyxJQUFJd0osR0N4Q1QsVUFBMEIsTUFBQzlJLEVBQUssUUFBRUksRUFBTyxTQUFFQyxFQUFRLFNBQUVGLEdBQVdHLEdBQ25FakIsUUFBUUMsSUFBSSxrQ0FDWlcsYUFBYW9CLFFBQVEsUUFBU3BELFNBQVNDLGVBQWUsU0FBU08sT0FDL0R3QixhQUFhb0IsUUFBUSxZQUFhcEQsU0FBU0MsZUFBZSxhQUFhTyxPQUN2RXdCLGFBQWFvQixRQUFRLFVBQVdwRCxTQUFTQyxlQUFlLFdBQVdPLE9BQ25Fd0IsYUFBYW9CLFFBQVEsV0FBWXBELFNBQVNDLGVBQWUsWUFBWU8sT0FDckV3QixhQUFhb0IsUUFBUSxRQUFTZixHQUM5QlAsR0FFSixDRGtDSXNKLENBQWdCLENBQUNySixRQUFPSSxVQUFTQyxXQUFVRixZQUFXRyxHQUd0RFYsSUFFNkNVLENBQUssRUVoRDNCLE1BRXZCakIsUUFBUUMsSUFBSSxXQUNaLElBQUlnSyxFQUFlLEdBQ25CakssUUFBUUMsSUFBSSw0QkFFWmdLLEVBQWFILEtBQUssQ0FBQ0ksYUFEQSxvQkFFbkJsSyxRQUFRQyxJQUFJZ0ssRUFDdUIsRUNIdkMsR0FHQXZKLElBTXVCOUIsU0FBU0ksY0FBYyxvQkFDL0JxQixpQkFBaUIsUUFBUzFCLEdBR3BCQyxTQUFTSSxjQUFjLGNBQy9CcUIsaUJBQWlCLFFBQVNuQixHQUdmTixTQUFTSSxjQUFjLGlCQUMvQnFCLGlCQUFpQixRQUFTRSxHQUdqQjNCLFNBQVNJLGNBQWMsa0JBQy9CcUIsaUJBQWlCLFFBQVNxSixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9kb21NYW5pcC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2VJU08vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZlRvZGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvY3JlYXRlVG9Eby5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL21hbmFnZS1sb2NhbC1zdG9yYWdlLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvcHJvamVjdExvYWQuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9qZWN0TG9hZCB9IGZyb20gXCIuL3Byb2plY3RMb2FkXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5RGVmYXVsdFByb2plY3QoKSB7XG5cbiAgICAvL0RPTSBmb3IgdGhlIGRlZmF1bHQgcHJvamVjdFxuICAgIGNvbnN0IHByb2plY3RJbmZvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcHJvamVjdEluZm8udGV4dENvbnRlbnQgPSBwcm9qZWN0TG9hZCgpLnByb2plY3RUaXRsZTtcbiAgICBjb250ZW50RGl2LmFwcGVuZENoaWxkKHByb2plY3RJbmZvKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlGb3JtKCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtdG9kby1mb3JtJykuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10b2RvLWJ1dHRvbicpO1xuICAgIGJ1dHRvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGROb3Rlc0xpc3QoKSB7XG4gICAgY29uc3QgYWRkSXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtbm90ZXMnKS52YWx1ZTtcblxuICAgIC8vUnVuIGNoZWNrIHRvIHNlZSBpZiB0aGUgaW5wdXQgYm94IGlzIGVtcHR5IGFuZCB0aGUgYnV0dG9uIHdhcyBjbGlja2VkXG4gICAgLy9JZiBzbywgcmV0dXJuIG91dCB0aGlzIGZ1bmN0aW9uIGdyYWNlZnVsbHkgLSBkbyBub3RoaW5nXG4gICAgLy9JZiBub3QsIGFwcGx5IGNvbnRlbnRzIHRvIG5ldyBsaSBpbiB0aGUgRE9NXG4gICAgaWYgKGFkZEl0ZW0gIT09IFwiXCIpIHtcbiAgICAgICAgY29uc3QgdWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm90ZXMtdWwnKTtcbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaS50ZXh0Q29udGVudCA9IGFkZEl0ZW07XG4gICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHNwYW4uY2xhc3NOYW1lID0gJ3JlbW92ZS1ub3Rlcy1pdGVtJztcbiAgICAgICAgY29uc3QgcmVtb3ZlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdcXHUwMEQ3Jyk7XG4gICAgICAgIGxpLmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgICBzcGFuLmFwcGVuZENoaWxkKHJlbW92ZUljb24pO1xuICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtbm90ZXMnKS52YWx1ZSA9IFwiXCI7XG5cbiAgICAgICAgLy9ET00gY2hlY2sgZm9yIGV4aXN0aW5nIGxpc3QgaXRlbXMgYWxyZWFkeSBwcmVzZW50XG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbnNpZGUgbW9kdWxlIGlmLi4uJywgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGknKS5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZUxpc3ROb3RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhub2RlTGlzdE5vdGVzKTtcblxuICAgICAgICAgICAgLy9ET00gdG8gYmluZCBjbGljayBldmVudCB0byBlYWNoIG5vZGUgaW4gbm9kZWxpc3QgaWYgY2xpY2tlZFxuICAgICAgICAgICAgbm9kZUxpc3ROb3Rlcy5mb3JFYWNoKGNoZWNrTm90ZXNJdGVtID0+IHtcbiAgICAgICAgICAgICAgICBjaGVja05vdGVzSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIHJlbW92ZUl0ZW1mcm9tTm90ZXNMaXN0KCkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja05vdGVzSXRlbS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTsgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHJldHVybjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyRm9ybSgpIHtcbiAgICBjb25zdCBub2RlTGlzdE5vdGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvcm0tbGknKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVMaXN0Tm90ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbm9kZUxpc3ROb3Rlc1tpXS5yZW1vdmUoKTtcbiAgICB9XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC10b2RvJykucmVzZXQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlUb0RvKCkge1xuXG4gICAgLy9HYXRoZXIgZGF0YSBmcm9tIGxvY2FsIGJhY2tlbmQgc3RvcmFnZSBhbmQgaW5pdGlhbGl6ZVxuICAgIGxldCB0aXRsZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdUaXRsZScpO1xuICAgIGxldCBsaXN0VHlwZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdMaXN0LVR5cGUnKTtcbiAgICBsZXQgZHVlRGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdEdWVEYXRlJyk7XG4gICAgbGV0IHByaW9yaXR5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1ByaW9yaXR5Jyk7XG4gICAgbGV0IG5vdGVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ05vdGVzJyk7XG5cbiAgICAvL0NoZWNrIHRvIGVuc3VyZSBsb2NhbCBzdG9yYWdlIGlzIHByZXNlbnQgdG8gbG9hZCwgb3RoZXJ3aXNlIGdyYWNlZnVsbHkgcmV0dXJuIG91dCAtIGF2b2lkIGFwcCBjcmFzaFxuICAgIGlmICh0aXRsZSA9PSBudWxsIHx8IGxpc3RUeXBlID09IG51bGwgfHwgZHVlRGF0ZSA9PSBudWxsIHx8IHByaW9yaXR5ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vQ2hlY2sgYW5kIGNsZWFyIGN1cnJlbnQgZGlzcGxheSBET00sIGlmIGFueVxuICAgIGNvbnN0IHJlbW92ZURpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2FyZCcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlRGl2cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZW1vdmVEaXZzW2ldLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vQ3JlYXRlIHRoZSBkaXNwbGF5IGNhcmQgZm9yIHRoZSBkaXNwbGF5IERPTVxuICAgIGNvbnNvbGUubG9nKCdkaXNwbGF5IHRvIHNjcmVlbicpO1xuICAgIGNvbnN0IHByb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzJyk7XG4gICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhcmQuY2xhc3NMaXN0LmFkZCgnY2FyZCcpO1xuICAgIHByb2plY3RzLmFwcGVuZENoaWxkKGNhcmQpO1xuXG4gICAgLy9DcmVhdGUgZGVsZXRlIHRvZG8gY2FyZCBidXR0b24vZXZlbnQgbGlzdGVuZXIgdG8gcmVtb3ZlIGZyb20gZGlzcGxheVxuICAgIGNvbnN0IGRlbGV0ZVRvRG9CdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBkZWxldGVUb0RvQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3JlbW92ZS10b2RvLWJ1dHRvbicpO1xuICAgIGRlbGV0ZVRvRG9CdXR0b24udGV4dENvbnRlbnQgPSAnRGVsZXRlL0NvbXBsZXRlIFRvRG8nO1xuICAgIGNhcmQuYXBwZW5kQ2hpbGQoZGVsZXRlVG9Eb0J1dHRvbik7XG4gICAgZGVsZXRlVG9Eb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIGRlbGV0ZVRvRG8oKSB7XG4gICAgICAgIGNhcmQucmVtb3ZlKCk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIH0pO1xuXG5cbiAgICAvL1BsYWNlIGRhdGEgaW4gbG9jYWwgdGVtcCBhcnJheSBhbmQgbG9vcCBvdmVyIGtleS92YWx1ZSBhbmQgZGlzcGxheSB0byBET01cbiAgICBsZXQgX2Rpc3BsYXlBcnJheSA9IHt0aXRsZSwgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX07XG4gICAgY29uc29sZS5sb2coX2Rpc3BsYXlBcnJheSk7XG5cbiAgICBmb3IgKGxldCBrZXkgaW4gX2Rpc3BsYXlBcnJheSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtrZXl9OiAke19kaXNwbGF5QXJyYXlba2V5XX1gKTtcbiAgICAgICAgY29uc3QgcGFyYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgcGFyYS50ZXh0Q29udGVudCA9IChgJHtrZXl9OiAke19kaXNwbGF5QXJyYXlba2V5XX1gKTtcbiAgICAgICAgY2FyZC5hcHBlbmRDaGlsZChwYXJhKTtcbiAgICB9XG4gICAgLy9ET00gZm9yIG5vdGVzbGlzdCBpdGVtcyB0byBwcmVzZW50IHRvIGxlZnQgc2lkZSBkaXNwbGF5IGFyZWFcbiAgICBjb25zdCBwYXJhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncCcpO1xuICAgIGNvbnN0IG5vdGVzTGlzdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIG5vdGVzTGlzdExhYmVsLnRleHRDb250ZW50ID0gXCJDaGVja2xpc3QgSXRlbXMgKENsaWNrIGl0ZW0gd2hlbiBjb21wbGV0ZWQpOlwiO1xuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICBub3Rlc0xpc3RMYWJlbC5jbGFzc0xpc3QuYWRkKCdub3Rlcy1saXN0LWxhYmVsJyk7XG4gICAgcGFyYVtwYXJhLmxlbmd0aCAtIDFdLmFwcGVuZENoaWxkKHVsKTtcbiAgICB1bC5hcHBlbmRDaGlsZChub3Rlc0xpc3RMYWJlbCk7XG5cbiAgICBjb25zb2xlLmxvZygnc2hvdyBtZSB0aGUgY29udGVudHMgb2Ygbm90ZWxpc3QgZnJvbSBsb2NhbCBzdG9yYWdlLi4uJywgbm90ZXMpO1xuICAgIGxldCBfbm90ZXNsaXN0QXJyYXkgPSBub3Rlcy5zcGxpdChcIixcIik7XG4gICAgY29uc29sZS5sb2coJ2NvbnRlbnRzIG9mIHRlbXAgbm90ZXNsaXN0YXJyYXknLCBfbm90ZXNsaXN0QXJyYXkpO1xuXG4gICAgaWYgKG5vdGVzICE9PSBcIlwiKSB7XG4gICAgICAgIC8vTG9vcCBhY3Rpb25cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfbm90ZXNsaXN0QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKF9ub3Rlc2xpc3RBcnJheVtpXSk7XG4gICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICBsaS5jbGFzc05hbWUgPSAnZGlzcGxheS1saSc7XG4gICAgICAgICAgICBsaS50ZXh0Q29udGVudCA9IF9ub3Rlc2xpc3RBcnJheVtpXTtcblxuICAgICAgICAgICAgLy9ldmVudHlcbiAgICAgICAgICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gc3RyaWtlT3V0ICgpIHtcbiAgICAgICAgICAgICAgICBpZiAobGkuY2xhc3NMaXN0LnRvZ2dsZSgnZG9uZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxpLnRleHRDb250ZW50LCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGkuY2xhc3NMaXN0LnRvZ2dsZSgnZGlzcGxheS1saScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxpLnRleHRDb250ZW50LCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSByZXR1cm47XG5cbiAgICAvL2NhbGwgb24gcGFnZSByZWZyZXNoIHRvIGNoZWNrIGZvciBleGlzdGluZyBzdHJpa2UgdGhyb3VnaHNcbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICAvL2xvb3AgdGhyb3VnaCBjdXJyZW50IGRpc3BsYXkgbGkncyBvbiBET00gYW5kIGFzc2lnbiBzdHJpa2UgdGhyb3VnaCBDU1MgaWYgbG9jYWwgc3RvcmFnZSBBUEkgZmxhZyBpcyBzZXRcbiAgICAgICAgY29uc3QgbGlOb2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Rpc3BsYXktbGknKTtcbiAgICAgICAgbGlOb2Rlcy5mb3JFYWNoKGxpTm9kZSA9PiB7XG4gICAgICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0obGlOb2RlLnRleHRDb250ZW50KSA9PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW5zaWRlIHRoZSBvbmxvYWQgaWYuLi4nKTtcbiAgICAgICAgICAgICAgICBsaU5vZGUuY2xhc3NOYW1lID0gJ2RvbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxufVxuIiwiLyoqXG4gKiBEYXlzIGluIDEgd2Vlay5cbiAqXG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIGRheXNJbldlZWsgPSA3O1xuXG4vKipcbiAqIERheXMgaW4gMSB5ZWFyXG4gKiBPbmUgeWVhcnMgZXF1YWxzIDM2NS4yNDI1IGRheXMgYWNjb3JkaW5nIHRvIHRoZSBmb3JtdWxhOlxuICpcbiAqID4gTGVhcCB5ZWFyIG9jY3VyZXMgZXZlcnkgNCB5ZWFycywgZXhjZXB0IGZvciB5ZWFycyB0aGF0IGFyZSBkaXZpc2FibGUgYnkgMTAwIGFuZCBub3QgZGl2aXNhYmxlIGJ5IDQwMC5cbiAqID4gMSBtZWFuIHllYXIgPSAoMzY1KzEvNC0xLzEwMCsxLzQwMCkgZGF5cyA9IDM2NS4yNDI1IGRheXNcbiAqXG4gKiBAbmFtZSBkYXlzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIGRheXNJblllYXIgPSAzNjUuMjQyNTtcblxuLyoqXG4gKiBNYXhpbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtYXhUaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIG1heFRpbWUgPSBNYXRoLnBvdygxMCwgOCkgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luTWludXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luTWludXRlID0gNjAwMDA7XG5cbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHNJbkhvdXIgPSAzNjAwMDAwO1xuXG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIHNlY29uZFxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luU2Vjb25kID0gMTAwMDtcblxuLyoqXG4gKiBNaW5pbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtaW5UaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIG1pblRpbWUgPSAtbWF4VGltZTtcblxuLyoqXG4gKiBNaW51dGVzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbWludXRlc0luSG91ciA9IDYwO1xuXG4vKipcbiAqIE1vbnRocyBpbiAxIHF1YXJ0ZXJcbiAqXG4gKiBAbmFtZSBtb250aHNJblF1YXJ0ZXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbW9udGhzSW5RdWFydGVyID0gMztcblxuLyoqXG4gKiBNb250aHMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgbW9udGhzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIG1vbnRoc0luWWVhciA9IDEyO1xuXG4vKipcbiAqIFF1YXJ0ZXJzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIHF1YXJ0ZXJzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIHF1YXJ0ZXJzSW5ZZWFyID0gNDtcblxuLyoqXG4gKiBTZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIHNlY29uZHNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgc2Vjb25kc0luSG91ciA9IDM2MDA7XG5cbi8qKlxuICogU2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBzZWNvbmRzSW5NaW51dGUgPSA2MDtcblxuLyoqXG4gKiBTZWNvbmRzIGluIDEgZGF5XG4gKlxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIHNlY29uZHNJbkRheSA9IHNlY29uZHNJbkhvdXIgKiAyNDtcblxuLyoqXG4gKiBTZWNvbmRzIGluIDEgd2Vla1xuICpcbiAqIEBuYW1lIHNlY29uZHNJbldlZWtcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgc2Vjb25kc0luV2VlayA9IHNlY29uZHNJbkRheSAqIDc7XG5cbi8qKlxuICogU2Vjb25kcyBpbiAxIHllYXJcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIHNlY29uZHNJblllYXIgPSBzZWNvbmRzSW5EYXkgKiBkYXlzSW5ZZWFyO1xuXG4vKipcbiAqIFNlY29uZHMgaW4gMSBtb250aFxuICpcbiAqIEBuYW1lIHNlY29uZHNJbk1vbnRoXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIHNlY29uZHNJbk1vbnRoID0gc2Vjb25kc0luWWVhciAvIDEyO1xuXG4vKipcbiAqIFNlY29uZHMgaW4gMSBxdWFydGVyXG4gKlxuICogQG5hbWUgc2Vjb25kc0luUXVhcnRlclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBzZWNvbmRzSW5RdWFydGVyID0gc2Vjb25kc0luTW9udGggKiAzOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luSG91ciwgbWlsbGlzZWNvbmRzSW5NaW51dGUgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgcGFyc2VJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgSVNPIHN0cmluZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUGFyc2UgdGhlIGdpdmVuIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXNuJ3QgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiBjYW5ub3QgcGFyc2UgdGhlIHN0cmluZyBvclxuICogdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBwYXJzZUlTTygnMjAxNC0wMi0xMVQxMTozMDozMCcpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnKzAyMDE0MTAxJyB0byBkYXRlLFxuICogLy8gaWYgdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXQgaXMgMTpcbiAqIGNvbnN0IHJlc3VsdCA9IHBhcnNlSVNPKCcrMDIwMTQxMDEnLCB7IGFkZGl0aW9uYWxEaWdpdHM6IDEgfSlcbiAqIC8vPT4gRnJpIEFwciAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSVNPKGFyZ3VtZW50LCBvcHRpb25zKSB7XG4gIHZhciBfb3B0aW9ucyRhZGRpdGlvbmFsRGk7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYWRkaXRpb25hbERpZ2l0cyA9IHRvSW50ZWdlcigoX29wdGlvbnMkYWRkaXRpb25hbERpID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMpICE9PSBudWxsICYmIF9vcHRpb25zJGFkZGl0aW9uYWxEaSAhPT0gdm9pZCAwID8gX29wdGlvbnMkYWRkaXRpb25hbERpIDogMik7XG4gIGlmIChhZGRpdGlvbmFsRGlnaXRzICE9PSAyICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDEgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhZGRpdGlvbmFsRGlnaXRzIG11c3QgYmUgMCwgMSBvciAyJyk7XG4gIH1cbiAgaWYgKCEodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuICB2YXIgZGF0ZVN0cmluZ3MgPSBzcGxpdERhdGVTdHJpbmcoYXJndW1lbnQpO1xuICB2YXIgZGF0ZTtcbiAgaWYgKGRhdGVTdHJpbmdzLmRhdGUpIHtcbiAgICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpO1xuICAgIGRhdGUgPSBwYXJzZURhdGUocGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nLCBwYXJzZVllYXJSZXN1bHQueWVhcik7XG4gIH1cbiAgaWYgKCFkYXRlIHx8IGlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIHRpbWUgPSAwO1xuICB2YXIgb2Zmc2V0O1xuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG4gICAgaWYgKGlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lKSB7XG4gICAgb2Zmc2V0ID0gcGFyc2VUaW1lem9uZShkYXRlU3RyaW5ncy50aW1lem9uZSk7XG4gICAgaWYgKGlzTmFOKG9mZnNldCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlydHlEYXRlID0gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSk7XG4gICAgLy8ganMgcGFyc2VkIHN0cmluZyBhc3N1bWluZyBpdCdzIGluIFVUQyB0aW1lem9uZVxuICAgIC8vIGJ1dCB3ZSBuZWVkIGl0IHRvIGJlIHBhcnNlZCBpbiBvdXIgdGltZXpvbmVcbiAgICAvLyBzbyB3ZSB1c2UgdXRjIHZhbHVlcyB0byBidWlsZCBkYXRlIGluIG91ciB0aW1lem9uZS5cbiAgICAvLyBZZWFyIHZhbHVlcyBmcm9tIDAgdG8gOTkgbWFwIHRvIHRoZSB5ZWFycyAxOTAwIHRvIDE5OTlcbiAgICAvLyBzbyBzZXQgeWVhciBleHBsaWNpdGx5IHdpdGggc2V0RnVsbFllYXIuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEYXRlKDApO1xuICAgIHJlc3VsdC5zZXRGdWxsWWVhcihkaXJ0eURhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGlydHlEYXRlLmdldFVUQ01vbnRoKCksIGRpcnR5RGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgIHJlc3VsdC5zZXRIb3VycyhkaXJ0eURhdGUuZ2V0VVRDSG91cnMoKSwgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSwgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSwgZGlydHlEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lICsgb2Zmc2V0KTtcbn1cbnZhciBwYXR0ZXJucyA9IHtcbiAgZGF0ZVRpbWVEZWxpbWl0ZXI6IC9bVCBdLyxcbiAgdGltZVpvbmVEZWxpbWl0ZXI6IC9bWiBdL2ksXG4gIHRpbWV6b25lOiAvKFtaKy1dLiopJC9cbn07XG52YXIgZGF0ZVJlZ2V4ID0gL14tPyg/OihcXGR7M30pfChcXGR7Mn0pKD86LT8oXFxkezJ9KSk/fFcoXFxkezJ9KSg/Oi0/KFxcZHsxfSkpP3wpJC87XG52YXIgdGltZVJlZ2V4ID0gL14oXFxkezJ9KD86Wy4sXVxcZCopPykoPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/KD86Oj8oXFxkezJ9KD86Wy4sXVxcZCopPykpPyQvO1xudmFyIHRpbWV6b25lUmVnZXggPSAvXihbKy1dKShcXGR7Mn0pKD86Oj8oXFxkezJ9KSk/JC87XG5mdW5jdGlvbiBzcGxpdERhdGVTdHJpbmcoZGF0ZVN0cmluZykge1xuICB2YXIgZGF0ZVN0cmluZ3MgPSB7fTtcbiAgdmFyIGFycmF5ID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy5kYXRlVGltZURlbGltaXRlcik7XG4gIHZhciB0aW1lU3RyaW5nO1xuXG4gIC8vIFRoZSByZWdleCBtYXRjaCBzaG91bGQgb25seSByZXR1cm4gYXQgbWF4aW11bSB0d28gYXJyYXkgZWxlbWVudHMuXG4gIC8vIFtkYXRlXSwgW3RpbWVdLCBvciBbZGF0ZSwgdGltZV0uXG4gIGlmIChhcnJheS5sZW5ndGggPiAyKSB7XG4gICAgcmV0dXJuIGRhdGVTdHJpbmdzO1xuICB9XG4gIGlmICgvOi8udGVzdChhcnJheVswXSkpIHtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMF07XG4gIH0gZWxzZSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGFycmF5WzBdO1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXTtcbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xuICAgICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMudGltZVpvbmVEZWxpbWl0ZXIpWzBdO1xuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcuc3Vic3RyKGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLCBkYXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIGlmICh0aW1lU3RyaW5nKSB7XG4gICAgdmFyIHRva2VuID0gcGF0dGVybnMudGltZXpvbmUuZXhlYyh0aW1lU3RyaW5nKTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nLnJlcGxhY2UodG9rZW5bMV0sICcnKTtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0ZVN0cmluZ3M7XG59XG5mdW5jdGlvbiBwYXJzZVllYXIoZGF0ZVN0cmluZywgYWRkaXRpb25hbERpZ2l0cykge1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdeKD86KFxcXFxkezR9fFsrLV1cXFxcZHsnICsgKDQgKyBhZGRpdGlvbmFsRGlnaXRzKSArICd9KXwoXFxcXGR7Mn18WystXVxcXFxkeycgKyAoMiArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pJCknKTtcbiAgdmFyIGNhcHR1cmVzID0gZGF0ZVN0cmluZy5tYXRjaChyZWdleCk7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiB7XG4gICAgeWVhcjogTmFOLFxuICAgIHJlc3REYXRlU3RyaW5nOiAnJ1xuICB9O1xuICB2YXIgeWVhciA9IGNhcHR1cmVzWzFdID8gcGFyc2VJbnQoY2FwdHVyZXNbMV0pIDogbnVsbDtcbiAgdmFyIGNlbnR1cnkgPSBjYXB0dXJlc1syXSA/IHBhcnNlSW50KGNhcHR1cmVzWzJdKSA6IG51bGw7XG5cbiAgLy8gZWl0aGVyIHllYXIgb3IgY2VudHVyeSBpcyBudWxsLCBub3QgYm90aFxuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT09IG51bGwgPyB5ZWFyIDogY2VudHVyeSAqIDEwMCxcbiAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZSgoY2FwdHVyZXNbMV0gfHwgY2FwdHVyZXNbMl0pLmxlbmd0aClcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRGF0ZShkYXRlU3RyaW5nLCB5ZWFyKSB7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG4gIGlmICh5ZWFyID09PSBudWxsKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIGNhcHR1cmVzID0gZGF0ZVN0cmluZy5tYXRjaChkYXRlUmVnZXgpO1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgc3RyaW5nXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgaXNXZWVrRGF0ZSA9ICEhY2FwdHVyZXNbNF07XG4gIHZhciBkYXlPZlllYXIgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1vbnRoID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1syXSkgLSAxO1xuICB2YXIgZGF5ID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1szXSk7XG4gIHZhciB3ZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s0XSk7XG4gIHZhciBkYXlPZldlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzVdKSAtIDE7XG4gIGlmIChpc1dlZWtEYXRlKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheU9mV2VlaykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgICByZXR1cm4gZGF5T2ZJU09XZWVrWWVhcih5ZWFyLCB3ZWVrLCBkYXlPZldlZWspO1xuICB9IGVsc2Uge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCk7XG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkgfHwgIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgTWF0aC5tYXgoZGF5T2ZZZWFyLCBkYXkpKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VEYXRlVW5pdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPyBwYXJzZUludCh2YWx1ZSkgOiAxO1xufVxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWVTdHJpbmcpIHtcbiAgdmFyIGNhcHR1cmVzID0gdGltZVN0cmluZy5tYXRjaCh0aW1lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gTmFOOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgdGltZVxuXG4gIHZhciBob3VycyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbMV0pO1xuICB2YXIgbWludXRlcyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbMl0pO1xuICB2YXIgc2Vjb25kcyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbM10pO1xuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIHJldHVybiBob3VycyAqIG1pbGxpc2Vjb25kc0luSG91ciArIG1pbnV0ZXMgKiBtaWxsaXNlY29uZHNJbk1pbnV0ZSArIHNlY29uZHMgKiAxMDAwO1xufVxuZnVuY3Rpb24gcGFyc2VUaW1lVW5pdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgcGFyc2VGbG9hdCh2YWx1ZS5yZXBsYWNlKCcsJywgJy4nKSkgfHwgMDtcbn1cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmUodGltZXpvbmVTdHJpbmcpIHtcbiAgaWYgKHRpbWV6b25lU3RyaW5nID09PSAnWicpIHJldHVybiAwO1xuICB2YXIgY2FwdHVyZXMgPSB0aW1lem9uZVN0cmluZy5tYXRjaCh0aW1lem9uZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIDA7XG4gIHZhciBzaWduID0gY2FwdHVyZXNbMV0gPT09ICcrJyA/IC0xIDogMTtcbiAgdmFyIGhvdXJzID0gcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICB2YXIgbWludXRlcyA9IGNhcHR1cmVzWzNdICYmIHBhcnNlSW50KGNhcHR1cmVzWzNdKSB8fCAwO1xuICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gc2lnbiAqIChob3VycyAqIG1pbGxpc2Vjb25kc0luSG91ciArIG1pbnV0ZXMgKiBtaWxsaXNlY29uZHNJbk1pbnV0ZSk7XG59XG5mdW5jdGlvbiBkYXlPZklTT1dlZWtZZWFyKGlzb1dlZWtZZWFyLCB3ZWVrLCBkYXkpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDc7XG4gIHZhciBkaWZmID0gKHdlZWsgLSAxKSAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbi8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG5cbi8vIEZlYnJ1YXJ5IGlzIG51bGwgdG8gaGFuZGxlIHRoZSBsZWFwIHllYXIgKHVzaW5nIHx8KVxudmFyIGRheXNJbk1vbnRocyA9IFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICByZXR1cm4gbW9udGggPj0gMCAmJiBtb250aCA8PSAxMSAmJiBkYXRlID49IDEgJiYgZGF0ZSA8PSAoZGF5c0luTW9udGhzW21vbnRoXSB8fCAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMjkgOiAyOCkpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcikge1xuICByZXR1cm4gZGF5T2ZZZWFyID49IDEgJiYgZGF5T2ZZZWFyIDw9IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAzNjYgOiAzNjUpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVXZWVrRGF0ZShfeWVhciwgd2VlaywgZGF5KSB7XG4gIHJldHVybiB3ZWVrID49IDEgJiYgd2VlayA8PSA1MyAmJiBkYXkgPj0gMCAmJiBkYXkgPD0gNjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgPT09IDI0KSB7XG4gICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgJiYgc2Vjb25kcyA9PT0gMDtcbiAgfVxuICByZXR1cm4gc2Vjb25kcyA+PSAwICYmIHNlY29uZHMgPCA2MCAmJiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8IDYwICYmIGhvdXJzID49IDAgJiYgaG91cnMgPCAyNTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZXpvbmUoX2hvdXJzLCBtaW51dGVzKSB7XG4gIHJldHVybiBtaW51dGVzID49IDAgJiYgbWludXRlcyA8PSA1OTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIF90eXBlb2Yobyk7XG59IiwiaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZlRvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgdG9kYXkuXG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiB0b2RheS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiB0b2RheVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZUb2RheSgpXG4gKiAvLz0+IE1vbiBPY3QgNiAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZUb2RheSgpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZEYXkoRGF0ZS5ub3coKSk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7XG5cbiAgLy8gQ2xvbmUgdGhlIGRhdGVcbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgeyBjb21wYXJlQXNjLCBmb3JtYXQsIHBhcnNlSVNPLCBzdGFydE9mVG9kYXkgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBjbGVhckZvcm0gfSBmcm9tICcuL2RvbU1hbmlwJztcbmltcG9ydCB7IHNhdmVUb0RvVG9Mb2NhbCB9IGZyb20gJy4vbWFuYWdlLWxvY2FsLXN0b3JhZ2UuanMnO1xuXG4vL0NyZWF0aW5nIGFuIGFycmF5IGZvciB0aGUgVG9Eb1xubGV0IHRvRG9BcnJheSA9IFtdO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlVG9EbyA9ICgpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGl0bGUnKS52YWx1ZTtcbiAgICBsZXQgbGlzdFR5cGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdC10eXBlJykudmFsdWU7XG4gICAgbGV0IGR1ZURhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHVlZGF0ZScpLnZhbHVlO1xuICAgIGxldCBwcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmlvcml0eScpLnZhbHVlO1xuXG4gICAgLy9DaGVjayB0byBzZWUgaWYgZW1wdHkgZmllbGRzIGV4aXN0XG4gICAgaWYgKHRpdGxlID09IFwiXCIgfHwgZHVlRGF0ZSA9PSBcIlwiKSB7XG4gICAgICAgIGFsZXJ0KCdUaXRsZSwgTm90ZXMsIGFuZCBEdWUgRGF0ZSBhcmUgcmVxdWlyZWQgZmllbGRzLCBwbGVhc2UgdHJ5IGFnYWluIScpXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy9DaGVjayB0byBzZWUgaWYgcHJlLWRhdGUgd2FzIGVudGVyZWRcbiAgICBpZiAocGFyc2VJU08oZHVlRGF0ZSkgPCBzdGFydE9mVG9kYXkoKSkge1xuICAgICAgICBhbGVydCgnWW91IGhhdmUgZW50ZXJlZCBhIGRhdGUgdGhhdCBoYXMgYWxyZWFkeSBwYXNzZWQhIFBsZWFzZSBlbnRlciBhIGRhdGUgZ3JlYXRlciB0aGFuIHRoYXQuJylcbiAgICAgICAgY29uc29sZS5sb2coJ2R1ZSBkYXRlJywgcGFyc2VJU08oZHVlRGF0ZSkpO1xuICAgICAgICBjb25zb2xlLmxvZygnZGF0ZSBub3cnLCBzdGFydE9mVG9kYXkoKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy9Mb29wIG92ZXIgdGhlIG5vZGVsaXN0IGZvciBub3RlcyBsaXN0IGl0ZW1zIGZyb20gdGhlIERPTSBhbmQgZm9ybWF0IHRvIHN0cmluZ1xuICAgIGNvbnN0IG5vZGVMaXN0Tm90ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS1saScpO1xuICAgIGxldCBub3Rlc0xpc3RBcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUxpc3ROb3Rlcy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIC8vU3RyaXAgb2ZmIHRoZSBcInhcIiBmcm9tIHRoZSBlbmQgb2YgdGhlIGxpIHRoZW4gcHVzaCB0byB0ZW1wIGFycmF5XG4gICAgICAgIGxldCBzdHJpcHBlZE5vdGVzTGlzdCA9IG5vZGVMaXN0Tm90ZXNbaV0udGV4dENvbnRlbnQucmVwbGFjZSgnXFx1MDBENycsIFwiXCIpO1xuICAgICAgICBub3Rlc0xpc3RBcnJheS5wdXNoKHN0cmlwcGVkTm90ZXNMaXN0KTtcbiAgICB9XG4gICAgLy9TdHJpcCBvZmYgdGhlIG5vdGVzIGxpc3QgYXJyYXkgYW5kIGNvbnZlcnQgdG8gc3RyaW5nIHdpdGggY29tbWFzXG4gICAgbGV0IG5vdGVzID0gbm90ZXNMaXN0QXJyYXkuam9pbihcIiwgXCIpO1xuXG4gICAgY29uc29sZS5sb2coJ2NhbGxlZCBjcmVhdGVUb0RPIG1vZHVsZS4uIGNyZWF0aW5nIHRvZG8gbm93Jyk7XG4gICAgY29uc29sZS5sb2coe3RpdGxlLCBub3RlcywgZHVlRGF0ZSwgcHJpb3JpdHksIGxpc3RUeXBlIH0pO1xuICAgIGNvbnNvbGUubG9nKCdwdXNoaW5nIHRoaXMgb2JqZWN0IHRvIHRoZSB0b0RvIGFycmF5Li4uJyk7XG4gICAgLy9UT0RPOiByZW1vdmUgYmVsb3cgdHdvIGxpbmVzIGlmIGFycmF5IGlzIG5vdCBuZWVkZWRcbiAgICB0b0RvQXJyYXkucHVzaCh7dGl0bGUsIG5vdGVzLCBkdWVEYXRlLCBwcmlvcml0eSwgbGlzdFR5cGV9KTtcbiAgICBjb25zb2xlLmxvZyh0b0RvQXJyYXkpO1xuXG4gICAgLy9DYWxsIHN0b3JhZ2UgbW9kdWxlIGFuZCBwdXNoIG9iamVjdCB0byBsb2NhbCBzdG9yYWdlXG4gICAgc2F2ZVRvRG9Ub0xvY2FsKHt0aXRsZSwgZHVlRGF0ZSwgcHJpb3JpdHksIGxpc3RUeXBlfSwgbm90ZXMpO1xuXG4gICAgLy9SZXNldCB0aGUgZm9ybSBhZnRlciBzdWNjZXNzZnVsIHN1Ym1pc3Npb25cbiAgICBjbGVhckZvcm0oKTtcblxuICAgIHJldHVybiB7dGl0bGUsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX0sIG5vdGVzO1xuXG59XG4gICAgXG4iLCJpbXBvcnQgeyBkaXNwbGF5VG9EbyB9IGZyb20gJy4vZG9tTWFuaXAuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVRvRG9Ub0xvY2FsICh7dGl0bGUsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX0sIG5vdGVzKSB7XG4gICAgY29uc29sZS5sb2coJ3NhdmluZyBvYmplY3QgdG8gbG9jYWwgc3RvcmFnZScpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdUaXRsZScsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLnZhbHVlKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnTGlzdC1UeXBlJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3QtdHlwZScpLnZhbHVlKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnRHVlRGF0ZScsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdWVkYXRlJykudmFsdWUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdQcmlvcml0eScsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmlvcml0eScpLnZhbHVlKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnTm90ZXMnLCBub3Rlcyk7XG4gICAgZGlzcGxheVRvRG8oKTtcbiAgICByZXR1cm4ge3RpdGxlLCBkdWVEYXRlLCBwcmlvcml0eSwgbGlzdFR5cGV9LCBub3Rlcztcbn0iLCIvL0ZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIGJsYW5rIHByamVjdCBhcnJheSBsaXN0XG5cbmV4cG9ydCBjb25zdCBwcm9qZWN0TG9hZCA9ICgpID0+IHtcbiAgICBcbiAgICBjb25zb2xlLmxvZygndGVzdGluZycpO1xuICAgIGxldCBwcm9qZWN0QXJyYXkgPSBbXTtcbiAgICBjb25zb2xlLmxvZygncHVzaGluZyB0aXRsZSBvZiBwcm9qZWN0Jyk7XG4gICAgbGV0IHByb2plY3RUaXRsZSA9ICdEZWZhdWx0IHByb2plY3QnO1xuICAgIHByb2plY3RBcnJheS5wdXNoKHtwcm9qZWN0VGl0bGV9KTtcbiAgICBjb25zb2xlLmxvZyhwcm9qZWN0QXJyYXkpO1xuICAgIHJldHVybiB7cHJvamVjdEFycmF5LCBwcm9qZWN0VGl0bGV9O1xufSIsIi8vaW1wb3J0IHNlcGVyYXRlIG1vZHVsZXNcbmltcG9ydCB7IHByb2plY3RMb2FkIH0gZnJvbSBcIi4vcHJvamVjdExvYWRcIjtcbmltcG9ydCB7IGRpc3BsYXlEZWZhdWx0UHJvamVjdCwgZGlzcGxheUZvcm0sIGFkZE5vdGVzTGlzdCwgY2xlYXJGb3JtLCBkaXNwbGF5VG9EbyB9IGZyb20gXCIuL2RvbU1hbmlwXCI7XG5pbXBvcnQgeyBjcmVhdGVUb0RvIH0gZnJvbSBcIi4vY3JlYXRlVG9Eb1wiO1xuXG5cbi8vQ2FsbCB0aGUgcHJvamVjdCBsb2FkIG9uIGZpcnN0IGxhbmRcbnByb2plY3RMb2FkKCk7XG5cbi8vQ2FsbCBkaXNwbGF5VG8gb24gZmlyc3QgbGFuZCAtIHB1bGxzIGZyb20gd2ViIGxvY2FsIHN0b3JhZ2UgQVBJbSwgaWYgYW55XG5kaXNwbGF5VG9EbygpO1xuXG4vL0NsaWNrIGV2ZW50cyBmb3IgcHJvamVjdCBjcmVhdGlvbiBhbmQgcmV2ZXJ0aW5nXG5sZXQgY2xpY2tFdmVudE1vZHVsZSA9IChmdW5jdGlvbigpIHtcblxuICAgIC8vQ2xpY2sgZXZlbnQgZm9yIGRpc3BsYXlpbmcgdGhlIGZvcm1cbiAgICBjb25zdCBhZGROZXdUb0RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10b2RvLWJ1dHRvbicpO1xuICAgIGFkZE5ld1RvRG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXNwbGF5Rm9ybSk7XG5cbiAgICAvL0NsaWNrIGV2ZW50IGZvciBhZGRpbmcgYW4gaXRlbSB0byB0aGUgbm90ZXMgb24gZm9ybVxuICAgIGNvbnN0IGFkZE5vdGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1ub3RlcycpO1xuICAgIGFkZE5vdGVzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkTm90ZXNMaXN0KTtcblxuICAgIC8vQ2xpY2sgZXZlbiB0byBjbGVhciB0aGUgZm9ybVxuICAgIGNvbnN0IGNsZWFyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc2V0LWJ1dHRvbicpO1xuICAgIGNsZWFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xlYXJGb3JtKTtcblxuICAgIC8vQ2xpY2sgZXZlbnQgdG8gc3VibWl0IGEgbmV3IHRvZG8gZm9ybSB0byBwcm9qZWN0XG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1Ym1pdC1idXR0b24nKTtcbiAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjcmVhdGVUb0RvKTtcbn0pKCk7XG5cbiJdLCJuYW1lcyI6WyJkaXNwbGF5Rm9ybSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJxdWVyeVNlbGVjdG9yIiwidmlzaWJpbGl0eSIsImFkZE5vdGVzTGlzdCIsImFkZEl0ZW0iLCJ2YWx1ZSIsInVsIiwibGkiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJzcGFuIiwiY2xhc3NOYW1lIiwicmVtb3ZlSWNvbiIsImNyZWF0ZVRleHROb2RlIiwiYXBwZW5kQ2hpbGQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsIm5vZGVMaXN0Tm90ZXMiLCJmb3JFYWNoIiwiY2hlY2tOb3Rlc0l0ZW0iLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlIiwiY2xlYXJGb3JtIiwiaSIsInJlc2V0IiwiZGlzcGxheVRvRG8iLCJ0aXRsZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJsaXN0VHlwZSIsImR1ZURhdGUiLCJwcmlvcml0eSIsIm5vdGVzIiwicmVtb3ZlRGl2cyIsInByb2plY3RzIiwiY2FyZCIsImNsYXNzTGlzdCIsImFkZCIsImRlbGV0ZVRvRG9CdXR0b24iLCJjbGVhciIsIl9kaXNwbGF5QXJyYXkiLCJrZXkiLCJwYXJhIiwibm90ZXNMaXN0TGFiZWwiLCJfbm90ZXNsaXN0QXJyYXkiLCJzcGxpdCIsInRvZ2dsZSIsInNldEl0ZW0iLCJ3aW5kb3ciLCJvbmxvYWQiLCJsaU5vZGUiLCJNYXRoIiwicG93IiwibWlsbGlzZWNvbmRzSW5Ib3VyIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiVHlwZUVycm9yIiwicGFyc2VJU08iLCJhcmd1bWVudCIsIm9wdGlvbnMiLCJfb3B0aW9ucyRhZGRpdGlvbmFsRGkiLCJhcmd1bWVudHMiLCJhZGRpdGlvbmFsRGlnaXRzIiwiZGlydHlOdW1iZXIiLCJOYU4iLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsImNlaWwiLCJmbG9vciIsInRvSW50ZWdlciIsIlJhbmdlRXJyb3IiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJEYXRlIiwiZGF0ZSIsImRhdGVTdHJpbmdzIiwiZGF0ZVN0cmluZyIsInRpbWVTdHJpbmciLCJhcnJheSIsInBhdHRlcm5zIiwiZGF0ZVRpbWVEZWxpbWl0ZXIiLCJ0ZXN0IiwidGltZVpvbmVEZWxpbWl0ZXIiLCJzdWJzdHIiLCJ0b2tlbiIsInRpbWV6b25lIiwiZXhlYyIsInRpbWUiLCJyZXBsYWNlIiwic3BsaXREYXRlU3RyaW5nIiwicGFyc2VZZWFyUmVzdWx0IiwicmVnZXgiLCJSZWdFeHAiLCJjYXB0dXJlcyIsIm1hdGNoIiwieWVhciIsInJlc3REYXRlU3RyaW5nIiwicGFyc2VJbnQiLCJjZW50dXJ5Iiwic2xpY2UiLCJwYXJzZVllYXIiLCJkYXRlUmVnZXgiLCJpc1dlZWtEYXRlIiwiZGF5T2ZZZWFyIiwicGFyc2VEYXRlVW5pdCIsIm1vbnRoIiwiZGF5Iiwid2VlayIsImRheU9mV2VlayIsIl95ZWFyIiwidmFsaWRhdGVXZWVrRGF0ZSIsImlzb1dlZWtZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJkaWZmIiwiZ2V0VVRDRGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJkYXlPZklTT1dlZWtZZWFyIiwiZGF5c0luTW9udGhzIiwiaXNMZWFwWWVhckluZGV4IiwidmFsaWRhdGVEYXRlIiwidmFsaWRhdGVEYXlPZlllYXJEYXRlIiwibWF4IiwicGFyc2VEYXRlIiwiZ2V0VGltZSIsIm9mZnNldCIsInRpbWVzdGFtcCIsInRpbWVSZWdleCIsImhvdXJzIiwicGFyc2VUaW1lVW5pdCIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwidmFsaWRhdGVUaW1lIiwicGFyc2VUaW1lIiwiZGlydHlEYXRlIiwicmVzdWx0Iiwic2V0RnVsbFllYXIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwic2V0SG91cnMiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwidGltZXpvbmVTdHJpbmciLCJ0aW1lem9uZVJlZ2V4Iiwic2lnbiIsIl9ob3VycyIsInZhbGlkYXRlVGltZXpvbmUiLCJwYXJzZVRpbWV6b25lIiwicGFyc2VGbG9hdCIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInN0YXJ0T2ZUb2RheSIsImFyZ1N0ciIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwidG9EYXRlIiwic3RhcnRPZkRheSIsIm5vdyIsInRvRG9BcnJheSIsImNyZWF0ZVRvRG8iLCJhbGVydCIsIm5vdGVzTGlzdEFycmF5Iiwic3RyaXBwZWROb3Rlc0xpc3QiLCJwdXNoIiwiam9pbiIsInNhdmVUb0RvVG9Mb2NhbCIsInByb2plY3RBcnJheSIsInByb2plY3RUaXRsZSJdLCJzb3VyY2VSb290IjoiIn0=