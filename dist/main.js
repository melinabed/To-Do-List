(()=>{"use strict";function e(){document.getElementById("add-todo-form").style.display="",document.querySelector(".add-todo-button").style.visibility="hidden"}function t(){const e=document.getElementById("add-notes").value;if(""!==e){const t=document.querySelector(".notes-ul"),n=document.createElement("li");n.textContent=e;const o=document.createElement("span");o.className="remove-notes-item";const r=document.createTextNode("×");if(n.appendChild(o),o.appendChild(r),t.appendChild(n),document.getElementById("add-notes").value="",document.querySelectorAll("li").length>0){console.log("inside module if...",document.querySelectorAll("li").length);const e=document.querySelectorAll("li");console.log(e),e.forEach((e=>{e.addEventListener("click",(function(){e.remove()}))}))}}}function n(){const e=document.querySelectorAll("li");for(let t=0;t<e.length;t++)e[t].remove();document.getElementById("add-todo").reset()}Math.pow(10,8);var o=36e5;function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function l(e,t){var n;r(1,arguments);var l=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==l&&1!==l&&0!==l)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var f,p=function(e){var t,n={},o=e.split(a.dateTimeDelimiter);if(o.length>2)return n;if(/:/.test(o[0])?t=o[0]:(n.date=o[0],t=o[1],a.timeZoneDelimiter.test(n.date)&&(n.date=e.split(a.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var r=a.timezone.exec(t);r?(n.time=t.replace(r[1],""),n.timezone=r[1]):n.time=t}return n}(e);if(p.date){var y=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),o=e.match(n);if(!o)return{year:NaN,restDateString:""};var r=o[1]?parseInt(o[1]):null,l=o[2]?parseInt(o[2]):null;return{year:null===l?r:100*l,restDateString:e.slice((o[1]||o[2]).length)}}(p.date,l);f=function(e,t){if(null===t)return new Date(NaN);var n=e.match(i);if(!n)return new Date(NaN);var o=!!n[4],r=d(n[1]),l=d(n[2])-1,a=d(n[3]),u=d(n[4]),c=d(n[5])-1;if(o)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,u,c)?function(e,t,n){var o=new Date(0);o.setUTCFullYear(e,0,4);var r=7*(t-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}(t,u,c):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(m[t]||(g(e)?29:28))}(t,l,a)&&function(e,t){return t>=1&&t<=(g(e)?366:365)}(t,r)?(s.setUTCFullYear(t,l,Math.max(r,a)),s):new Date(NaN)}(y.restDateString,y.year)}if(!f||isNaN(f.getTime()))return new Date(NaN);var v,D=f.getTime(),h=0;if(p.time&&(h=function(e){var t=e.match(u);if(!t)return NaN;var n=s(t[1]),r=s(t[2]),l=s(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,l)?n*o+6e4*r+1e3*l:NaN}(p.time),isNaN(h)))return new Date(NaN);if(!p.timezone){var N=new Date(D+h),S=new Date(0);return S.setFullYear(N.getUTCFullYear(),N.getUTCMonth(),N.getUTCDate()),S.setHours(N.getUTCHours(),N.getUTCMinutes(),N.getUTCSeconds(),N.getUTCMilliseconds()),S}return v=function(e){if("Z"===e)return 0;var t=e.match(c);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),l=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,l)?n*(r*o+6e4*l):NaN}(p.timezone),isNaN(v)?new Date(NaN):new Date(D+h+v)}var a={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},i=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,c=/^([+-])(\d{2})(?::?(\d{2}))?$/;function d(e){return e?parseInt(e):1}function s(e){return e&&parseFloat(e.replace(",","."))||0}var m=[31,null,31,30,31,30,31,31,30,31,30,31];function g(e){return e%400==0||e%4==0&&e%100!=0}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(){return function(e){r(1,arguments);var t=function(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===f(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}(e);return t.setHours(0,0,0,0),t}(Date.now())}let y=[];const v=()=>{let e=document.getElementById("title").value,t=document.getElementById("list-type").value,o=document.getElementById("duedate").value,r=document.getElementById("priority").value;if(""==e||""==o)return void alert("Title, Notes, and Due Date are required fields, please try again!");if(l(o)<p())return alert("You have entered a date that has already passed! Please enter a date greater than that."),console.log("due date",l(o)),void console.log("date now",p());const a=document.querySelectorAll("li");let i=[];for(let e=0;e<a.length;e++){let t=a[e].textContent.replace("×","");i.push(t)}let u=i.join(", ");return console.log("called createToDO module.. creating todo now"),console.log({title:e,notes:u,dueDate:o,priority:r,listType:t}),console.log("pushing this object to the toDo array..."),y.push({title:e,notes:u,dueDate:o,priority:r,listType:t}),console.log(y),function({title:e,notes:t,dueDate:n,priority:o,listType:r}){console.log("saving object to local storage"),localStorage.setItem("Title",document.getElementById("title").value),localStorage.setItem("List-Type",document.getElementById("list-type").value),localStorage.setItem("DueDate",document.getElementById("duedate").value),localStorage.setItem("Priority",document.getElementById("priority").value),localStorage.setItem("Notes",t),function(){const e=document.querySelectorAll(".card");console.log("show me the node count of current DOM card divs...",e);for(let t=0;t<e.length;t++)e[t].remove();console.log("display to screen");const t=document.querySelector(".projects"),n=document.createElement("div");n.classList.add("card"),t.appendChild(n);let o=localStorage.getItem("Title"),r=localStorage.getItem("List-Type"),l=localStorage.getItem("DueDate"),a=localStorage.getItem("Priority"),i={title:o,notes:localStorage.getItem("Notes"),dueDate:l,priority:a,listType:r};console.log(i);for(let e in i){console.log(`${e}: ${i[e]}`);const t=document.createElement("p");t.textContent=`${e}: ${i[e]}`,n.appendChild(t)}}()}({title:e,notes:u,dueDate:o,priority:r,listType:t}),n(),{title:e,notes:u,dueDate:o,priority:r,listType:t}};(()=>{console.log("testing");let e=[];console.log("pushing title of project");e.push({projectTitle:"Default project"}),console.log(e)})(),document.querySelector(".add-todo-button").addEventListener("click",e),document.querySelector(".add-notes").addEventListener("click",t),document.querySelector(".reset-button").addEventListener("click",n),document.querySelector(".submit-button").addEventListener("click",v)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQ3JDLE1BQU1DLEVBQU8xSyxTQUFTVyxjQUFjLEtBQ3BDK0osRUFBSzlKLFlBQWMsR0FBSTZKLE1BQVFELEVBQWNDLEtBQzdDTCxFQUFLbkosWUFBWXlKLEVBQ3JCLENBQ0osQ1VuRklDLEVBRUosQ0RrQ0lDLENBQWdCLENBQUN0QixRQUFPUSxRQUFPTixVQUFTQyxXQUFVRixhQUdsRDVILElBRU8sQ0FBQzJILFFBQU9RLFFBQU9OLFVBQVNDLFdBQVVGLFdBQVMsRUVoRDNCLE1BQ3ZCbkksUUFBUUMsSUFBSSxXQUNaLElBQUl3SixFQUFlLEdBQ25CekosUUFBUUMsSUFBSSw0QkFFWndKLEVBQWFoQixLQUFLLENBQUNpQixhQURBLG9CQUVuQjFKLFFBQVFDLElBQUl3SixFQUN1QixFQ0Z2QyxHQVF1QjdLLFNBQVNJLGNBQWMsb0JBQy9CcUIsaUJBQWlCLFFBQVMxQixHQUdwQkMsU0FBU0ksY0FBYyxjQUMvQnFCLGlCQUFpQixRQUFTbkIsR0FHZk4sU0FBU0ksY0FBYyxpQkFDL0JxQixpQkFBaUIsUUFBU0UsR0FHakIzQixTQUFTSSxjQUFjLGtCQUMvQnFCLGlCQUFpQixRQUFTNEgsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvZG9tTWFuaXAuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlSVNPL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZUb2RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2NyZWF0ZVRvRG8uanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9tYW5hZ2UtbG9jYWwtc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3Byb2plY3RMb2FkLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvamVjdExvYWQgfSBmcm9tIFwiLi9wcm9qZWN0TG9hZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheURlZmF1bHRQcm9qZWN0KCkge1xuXG4gICAgLy9ET00gZm9yIHRoZSBkZWZhdWx0IHByb2plY3RcbiAgICBjb25zdCBwcm9qZWN0SW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHByb2plY3RJbmZvLnRleHRDb250ZW50ID0gcHJvamVjdExvYWQoKS5wcm9qZWN0VGl0bGU7XG4gICAgY29udGVudERpdi5hcHBlbmRDaGlsZChwcm9qZWN0SW5mbyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5Rm9ybSgpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXRvZG8tZm9ybScpLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdG9kby1idXR0b24nKTtcbiAgICBidXR0b24uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTm90ZXNMaXN0KCkge1xuICAgIGNvbnN0IGFkZEl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLW5vdGVzJykudmFsdWU7XG5cbiAgICAvL1J1biBjaGVjayB0byBzZWUgaWYgdGhlIGlucHV0IGJveCBpcyBlbXB0eSBhbmQgdGhlIGJ1dHRvbiB3YXMgY2xpY2tlZFxuICAgIC8vSWYgc28sIHJldHVybiBvdXQgdGhpcyBmdW5jdGlvbiBncmFjZWZ1bGx5IC0gZG8gbm90aGluZ1xuICAgIC8vSWYgbm90LCBhcHBseSBjb250ZW50cyB0byBuZXcgbGkgaW4gdGhlIERPTVxuICAgIGlmIChhZGRJdGVtICE9PSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IHVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGVzLXVsJyk7XG4gICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgbGkudGV4dENvbnRlbnQgPSBhZGRJdGVtO1xuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzcGFuLmNsYXNzTmFtZSA9ICdyZW1vdmUtbm90ZXMtaXRlbSc7XG4gICAgICAgIGNvbnN0IHJlbW92ZUljb24gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXFx1MDBENycpO1xuICAgICAgICBsaS5hcHBlbmRDaGlsZChzcGFuKTtcbiAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZChyZW1vdmVJY29uKTtcbiAgICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLW5vdGVzJykudmFsdWUgPSBcIlwiO1xuXG4gICAgICAgIC8vRE9NIGNoZWNrIGZvciBleGlzdGluZyBsaXN0IGl0ZW1zIGFscmVhZHkgcHJlc2VudFxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGknKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaW5zaWRlIG1vZHVsZSBpZi4uLicsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVMaXN0Tm90ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cobm9kZUxpc3ROb3Rlcyk7XG5cbiAgICAgICAgICAgIC8vRE9NIHRvIGJpbmQgY2xpY2sgZXZlbnQgdG8gZWFjaCBub2RlIGluIG5vZGVsaXN0IGlmIGNsaWNrZWRcbiAgICAgICAgICAgIG5vZGVMaXN0Tm90ZXMuZm9yRWFjaChjaGVja05vdGVzSXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgY2hlY2tOb3Rlc0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiByZW1vdmVJdGVtZnJvbU5vdGVzTGlzdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tOb3Rlc0l0ZW0ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSByZXR1cm47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckZvcm0oKSB7XG4gICAgY29uc3Qgbm9kZUxpc3ROb3RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlTGlzdE5vdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5vZGVMaXN0Tm90ZXNbaV0ucmVtb3ZlKCk7XG4gICAgfVxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtdG9kbycpLnJlc2V0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5VG9EbygpIHtcblxuICAgIC8vQ2hlY2sgYW5kIGNsZWFyIGN1cnJlbnQgZGlzcGxheSBET00sIGlmIGFueVxuICAgIGNvbnN0IHJlbW92ZURpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2FyZCcpO1xuICAgIGNvbnNvbGUubG9nKCdzaG93IG1lIHRoZSBub2RlIGNvdW50IG9mIGN1cnJlbnQgRE9NIGNhcmQgZGl2cy4uLicsIHJlbW92ZURpdnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlRGl2cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZW1vdmVEaXZzW2ldLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vQ3JlYXRlIHRoZSBkaXNwbGF5IGNhcmQgZm9yIHRoZSBkaXNwbGF5IERPTVxuICAgIGNvbnNvbGUubG9nKCdkaXNwbGF5IHRvIHNjcmVlbicpO1xuICAgIGNvbnN0IHByb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzJyk7XG4gICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNhcmQuY2xhc3NMaXN0LmFkZCgnY2FyZCcpO1xuICAgIHByb2plY3RzLmFwcGVuZENoaWxkKGNhcmQpO1xuXG4gICAgLy9HYXRoZXIgZGF0YSBmcm9tIGxvY2FsIGJhY2tlbmQgc3RvcmFnZSBhbmQgaW5pdGlhbGl6ZVxuICAgIGxldCB0aXRsZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdUaXRsZScpO1xuICAgIGxldCBsaXN0VHlwZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdMaXN0LVR5cGUnKTtcbiAgICBsZXQgZHVlRGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdEdWVEYXRlJyk7XG4gICAgbGV0IHByaW9yaXR5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1ByaW9yaXR5Jyk7XG4gICAgbGV0IG5vdGVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ05vdGVzJyk7XG5cbiAgICAvL1BsYWNlIGRhdGEgaW4gbG9jYWwgdGVtcCBhcnJheSBhbmQgbG9vcCBvdmVyIGtleS92YWx1ZSBhbmQgZGlzcGxheSB0byBET01cbiAgICBsZXQgX2Rpc3BsYXlBcnJheSA9IHt0aXRsZSwgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX07XG4gICAgY29uc29sZS5sb2coX2Rpc3BsYXlBcnJheSk7XG5cbiAgICBmb3IgKGxldCBrZXkgaW4gX2Rpc3BsYXlBcnJheSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgJHtrZXl9OiAke19kaXNwbGF5QXJyYXlba2V5XX1gKTtcbiAgICAgICAgY29uc3QgcGFyYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgcGFyYS50ZXh0Q29udGVudCA9IChgJHtrZXl9OiAke19kaXNwbGF5QXJyYXlba2V5XX1gKTtcbiAgICAgICAgY2FyZC5hcHBlbmRDaGlsZChwYXJhKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIERheXMgaW4gMSB3ZWVrLlxuICpcbiAqIEBuYW1lIGRheXNJbldlZWtcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgZGF5c0luV2VlayA9IDc7XG5cbi8qKlxuICogRGF5cyBpbiAxIHllYXJcbiAqIE9uZSB5ZWFycyBlcXVhbHMgMzY1LjI0MjUgZGF5cyBhY2NvcmRpbmcgdG8gdGhlIGZvcm11bGE6XG4gKlxuICogPiBMZWFwIHllYXIgb2NjdXJlcyBldmVyeSA0IHllYXJzLCBleGNlcHQgZm9yIHllYXJzIHRoYXQgYXJlIGRpdmlzYWJsZSBieSAxMDAgYW5kIG5vdCBkaXZpc2FibGUgYnkgNDAwLlxuICogPiAxIG1lYW4geWVhciA9ICgzNjUrMS80LTEvMTAwKzEvNDAwKSBkYXlzID0gMzY1LjI0MjUgZGF5c1xuICpcbiAqIEBuYW1lIGRheXNJblllYXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuXG4vKipcbiAqIE1heGltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBuYW1lIG1heFRpbWVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbWF4VGltZSA9IE1hdGgucG93KDEwLCA4KSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgbWludXRlXG4gKlxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5NaW51dGVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcblxuLyoqXG4gKiBNaWxsaXNlY29uZHMgaW4gMSBob3VyXG4gKlxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5Ib3VyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luSG91ciA9IDM2MDAwMDA7XG5cbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgc2Vjb25kXG4gKlxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5TZWNvbmRcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5TZWNvbmQgPSAxMDAwO1xuXG4vKipcbiAqIE1pbmltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBuYW1lIG1pblRpbWVcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbWluVGltZSA9IC1tYXhUaW1lO1xuXG4vKipcbiAqIE1pbnV0ZXMgaW4gMSBob3VyXG4gKlxuICogQG5hbWUgbWludXRlc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBtaW51dGVzSW5Ib3VyID0gNjA7XG5cbi8qKlxuICogTW9udGhzIGluIDEgcXVhcnRlclxuICpcbiAqIEBuYW1lIG1vbnRoc0luUXVhcnRlclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBtb250aHNJblF1YXJ0ZXIgPSAzO1xuXG4vKipcbiAqIE1vbnRocyBpbiAxIHllYXJcbiAqXG4gKiBAbmFtZSBtb250aHNJblllYXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgbW9udGhzSW5ZZWFyID0gMTI7XG5cbi8qKlxuICogUXVhcnRlcnMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgcXVhcnRlcnNJblllYXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgcXVhcnRlcnNJblllYXIgPSA0O1xuXG4vKipcbiAqIFNlY29uZHMgaW4gMSBob3VyXG4gKlxuICogQG5hbWUgc2Vjb25kc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcblxuLyoqXG4gKiBTZWNvbmRzIGluIDEgbWludXRlXG4gKlxuICogQG5hbWUgc2Vjb25kc0luTWludXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuXG4vKipcbiAqIFNlY29uZHMgaW4gMSBkYXlcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5EYXlcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuXG4vKipcbiAqIFNlY29uZHMgaW4gMSB3ZWVrXG4gKlxuICogQG5hbWUgc2Vjb25kc0luV2Vla1xuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuZXhwb3J0IHZhciBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcblxuLyoqXG4gKiBTZWNvbmRzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIHNlY29uZHNJblllYXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG5cbi8qKlxuICogU2Vjb25kcyBpbiAxIG1vbnRoXG4gKlxuICogQG5hbWUgc2Vjb25kc0luTW9udGhcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgc2Vjb25kc0luTW9udGggPSBzZWNvbmRzSW5ZZWFyIC8gMTI7XG5cbi8qKlxuICogU2Vjb25kcyBpbiAxIHF1YXJ0ZXJcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5RdWFydGVyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIHNlY29uZHNJblF1YXJ0ZXIgPSBzZWNvbmRzSW5Nb250aCAqIDM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5Ib3VyLCBtaWxsaXNlY29uZHNJbk1pbnV0ZSB9IGZyb20gXCIuLi9jb25zdGFudHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBwYXJzZUlTT1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSBJU08gc3RyaW5nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gc3RyaW5nIGluIElTTyA4NjAxIGZvcm1hdCBhbmQgcmV0dXJuIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogRnVuY3Rpb24gYWNjZXB0cyBjb21wbGV0ZSBJU08gODYwMSBmb3JtYXRzIGFzIHdlbGwgYXMgcGFydGlhbCBpbXBsZW1lbnRhdGlvbnMuXG4gKiBJU08gODYwMTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMVxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpc24ndCBhIHN0cmluZywgdGhlIGZ1bmN0aW9uIGNhbm5vdCBwYXJzZSB0aGUgc3RyaW5nIG9yXG4gKiB0aGUgdmFsdWVzIGFyZSBpbnZhbGlkLCBpdCByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0gezB8MXwyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzYCBtdXN0IGJlIDAsIDEgb3IgMlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnMjAxNC0wMi0xMVQxMTozMDozMCcgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHBhcnNlSVNPKCcyMDE0LTAyLTExVDExOjMwOjMwJylcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcrMDIwMTQxMDEnIHRvIGRhdGUsXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJyswMjAxNDEwMScsIHsgYWRkaXRpb25hbERpZ2l0czogMSB9KVxuICogLy89PiBGcmkgQXByIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VJU08oYXJndW1lbnQsIG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGFkZGl0aW9uYWxEaTtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhZGRpdGlvbmFsRGlnaXRzID0gdG9JbnRlZ2VyKChfb3B0aW9ucyRhZGRpdGlvbmFsRGkgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cykgIT09IG51bGwgJiYgX29wdGlvbnMkYWRkaXRpb25hbERpICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRhZGRpdGlvbmFsRGkgOiAyKTtcbiAgaWYgKGFkZGl0aW9uYWxEaWdpdHMgIT09IDIgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMSAmJiBhZGRpdGlvbmFsRGlnaXRzICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2FkZGl0aW9uYWxEaWdpdHMgbXVzdCBiZSAwLCAxIG9yIDInKTtcbiAgfVxuICBpZiAoISh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudCk7XG4gIHZhciBkYXRlO1xuICBpZiAoZGF0ZVN0cmluZ3MuZGF0ZSkge1xuICAgIHZhciBwYXJzZVllYXJSZXN1bHQgPSBwYXJzZVllYXIoZGF0ZVN0cmluZ3MuZGF0ZSwgYWRkaXRpb25hbERpZ2l0cyk7XG4gICAgZGF0ZSA9IHBhcnNlRGF0ZShwYXJzZVllYXJSZXN1bHQucmVzdERhdGVTdHJpbmcsIHBhcnNlWWVhclJlc3VsdC55ZWFyKTtcbiAgfVxuICBpZiAoIWRhdGUgfHwgaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgdGltZSA9IDA7XG4gIHZhciBvZmZzZXQ7XG4gIGlmIChkYXRlU3RyaW5ncy50aW1lKSB7XG4gICAgdGltZSA9IHBhcnNlVGltZShkYXRlU3RyaW5ncy50aW1lKTtcbiAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0ZVN0cmluZ3MudGltZXpvbmUpIHtcbiAgICBvZmZzZXQgPSBwYXJzZVRpbWV6b25lKGRhdGVTdHJpbmdzLnRpbWV6b25lKTtcbiAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkaXJ0eURhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKTtcbiAgICAvLyBqcyBwYXJzZWQgc3RyaW5nIGFzc3VtaW5nIGl0J3MgaW4gVVRDIHRpbWV6b25lXG4gICAgLy8gYnV0IHdlIG5lZWQgaXQgdG8gYmUgcGFyc2VkIGluIG91ciB0aW1lem9uZVxuICAgIC8vIHNvIHdlIHVzZSB1dGMgdmFsdWVzIHRvIGJ1aWxkIGRhdGUgaW4gb3VyIHRpbWV6b25lLlxuICAgIC8vIFllYXIgdmFsdWVzIGZyb20gMCB0byA5OSBtYXAgdG8gdGhlIHllYXJzIDE5MDAgdG8gMTk5OVxuICAgIC8vIHNvIHNldCB5ZWFyIGV4cGxpY2l0bHkgd2l0aCBzZXRGdWxsWWVhci5cbiAgICB2YXIgcmVzdWx0ID0gbmV3IERhdGUoMCk7XG4gICAgcmVzdWx0LnNldEZ1bGxZZWFyKGRpcnR5RGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkaXJ0eURhdGUuZ2V0VVRDTW9udGgoKSwgZGlydHlEYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgcmVzdWx0LnNldEhvdXJzKGRpcnR5RGF0ZS5nZXRVVENIb3VycygpLCBkaXJ0eURhdGUuZ2V0VVRDTWludXRlcygpLCBkaXJ0eURhdGUuZ2V0VVRDU2Vjb25kcygpLCBkaXJ0eURhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpO1xufVxudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcbmZ1bmN0aW9uIHNwbGl0RGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHZhciBkYXRlU3RyaW5ncyA9IHt9O1xuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1pdGVyKTtcbiAgdmFyIHRpbWVTdHJpbmc7XG5cbiAgLy8gVGhlIHJlZ2V4IG1hdGNoIHNob3VsZCBvbmx5IHJldHVybiBhdCBtYXhpbXVtIHR3byBhcnJheSBlbGVtZW50cy5cbiAgLy8gW2RhdGVdLCBbdGltZV0sIG9yIFtkYXRlLCB0aW1lXS5cbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICByZXR1cm4gZGF0ZVN0cmluZ3M7XG4gIH1cbiAgaWYgKC86Ly50ZXN0KGFycmF5WzBdKSkge1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVswXTtcbiAgfSBlbHNlIHtcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gYXJyYXlbMF07XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzFdO1xuICAgIGlmIChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlci50ZXN0KGRhdGVTdHJpbmdzLmRhdGUpKSB7XG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlcilbMF07XG4gICAgICB0aW1lU3RyaW5nID0gZGF0ZVN0cmluZy5zdWJzdHIoZGF0ZVN0cmluZ3MuZGF0ZS5sZW5ndGgsIGRhdGVTdHJpbmcubGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRpbWVTdHJpbmcpIHtcbiAgICB2YXIgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZS5leGVjKHRpbWVTdHJpbmcpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmcucmVwbGFjZSh0b2tlblsxXSwgJycpO1xuICAgICAgZGF0ZVN0cmluZ3MudGltZXpvbmUgPSB0b2tlblsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRlU3RyaW5ncztcbn1cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14oPzooXFxcXGR7NH18WystXVxcXFxkeycgKyAoNCArIGFkZGl0aW9uYWxEaWdpdHMpICsgJ30pfChcXFxcZHsyfXxbKy1dXFxcXGR7JyArICgyICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSkkKScpO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKHJlZ2V4KTtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIHtcbiAgICB5ZWFyOiBOYU4sXG4gICAgcmVzdERhdGVTdHJpbmc6ICcnXG4gIH07XG4gIHZhciB5ZWFyID0gY2FwdHVyZXNbMV0gPyBwYXJzZUludChjYXB0dXJlc1sxXSkgOiBudWxsO1xuICB2YXIgY2VudHVyeSA9IGNhcHR1cmVzWzJdID8gcGFyc2VJbnQoY2FwdHVyZXNbMl0pIDogbnVsbDtcblxuICAvLyBlaXRoZXIgeWVhciBvciBjZW50dXJ5IGlzIG51bGwsIG5vdCBib3RoXG4gIHJldHVybiB7XG4gICAgeWVhcjogY2VudHVyeSA9PT0gbnVsbCA/IHllYXIgOiBjZW50dXJ5ICogMTAwLFxuICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKChjYXB0dXJlc1sxXSB8fCBjYXB0dXJlc1syXSkubGVuZ3RoKVxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKGRhdGVSZWdleCk7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBzdHJpbmdcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIHZhciBpc1dlZWtEYXRlID0gISFjYXB0dXJlc1s0XTtcbiAgdmFyIGRheU9mWWVhciA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMV0pO1xuICB2YXIgbW9udGggPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzJdKSAtIDE7XG4gIHZhciBkYXkgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzNdKTtcbiAgdmFyIHdlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzRdKTtcbiAgdmFyIGRheU9mV2VlayA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbNV0pIC0gMTtcbiAgaWYgKGlzV2Vla0RhdGUpIHtcbiAgICBpZiAoIXZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5T2ZXZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWssIGRheU9mV2Vlayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgICBpZiAoIXZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF5KSB8fCAhdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcikpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBNYXRoLm1heChkYXlPZlllYXIsIGRheSkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZURhdGVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHBhcnNlSW50KHZhbHVlKSA6IDE7XG59XG5mdW5jdGlvbiBwYXJzZVRpbWUodGltZVN0cmluZykge1xuICB2YXIgY2FwdHVyZXMgPSB0aW1lU3RyaW5nLm1hdGNoKHRpbWVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBOYU47IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB0aW1lXG5cbiAgdmFyIGhvdXJzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1sxXSk7XG4gIHZhciBtaW51dGVzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1syXSk7XG4gIHZhciBzZWNvbmRzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1szXSk7XG4gIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgcmV0dXJuIGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlICsgc2Vjb25kcyAqIDEwMDA7XG59XG5mdW5jdGlvbiBwYXJzZVRpbWVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoJywnLCAnLicpKSB8fCAwO1xufVxuZnVuY3Rpb24gcGFyc2VUaW1lem9uZSh0aW1lem9uZVN0cmluZykge1xuICBpZiAodGltZXpvbmVTdHJpbmcgPT09ICdaJykgcmV0dXJuIDA7XG4gIHZhciBjYXB0dXJlcyA9IHRpbWV6b25lU3RyaW5nLm1hdGNoKHRpbWV6b25lUmVnZXgpO1xuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gMDtcbiAgdmFyIHNpZ24gPSBjYXB0dXJlc1sxXSA9PT0gJysnID8gLTEgOiAxO1xuICB2YXIgaG91cnMgPSBwYXJzZUludChjYXB0dXJlc1syXSk7XG4gIHZhciBtaW51dGVzID0gY2FwdHVyZXNbM10gJiYgcGFyc2VJbnQoY2FwdHVyZXNbM10pIHx8IDA7XG4gIGlmICghdmFsaWRhdGVUaW1lem9uZShob3VycywgbWludXRlcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIHJldHVybiBzaWduICogKGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlKTtcbn1cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1dlZWtZZWFyLCAwLCA0KTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgNztcbiAgdmFyIGRpZmYgPSAod2VlayAtIDEpICogNyArIGRheSArIDEgLSBmb3VydGhPZkphbnVhcnlEYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcblxuLy8gRmVicnVhcnkgaXMgbnVsbCB0byBoYW5kbGUgdGhlIGxlYXAgeWVhciAodXNpbmcgfHwpXG52YXIgZGF5c0luTW9udGhzID0gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5mdW5jdGlvbiBpc0xlYXBZZWFySW5kZXgoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gIHJldHVybiBtb250aCA+PSAwICYmIG1vbnRoIDw9IDExICYmIGRhdGUgPj0gMSAmJiBkYXRlIDw9IChkYXlzSW5Nb250aHNbbW9udGhdIHx8IChpc0xlYXBZZWFySW5kZXgoeWVhcikgPyAyOSA6IDI4KSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIHJldHVybiBkYXlPZlllYXIgPj0gMSAmJiBkYXlPZlllYXIgPD0gKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDM2NiA6IDM2NSk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVdlZWtEYXRlKF95ZWFyLCB3ZWVrLCBkYXkpIHtcbiAgcmV0dXJuIHdlZWsgPj0gMSAmJiB3ZWVrIDw9IDUzICYmIGRheSA+PSAwICYmIGRheSA8PSA2O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gIGlmIChob3VycyA9PT0gMjQpIHtcbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCAmJiBzZWNvbmRzID09PSAwO1xuICB9XG4gIHJldHVybiBzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8IDYwICYmIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDwgNjAgJiYgaG91cnMgPj0gMCAmJiBob3VycyA8IDI1O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lem9uZShfaG91cnMsIG1pbnV0ZXMpIHtcbiAgcmV0dXJuIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDw9IDU5O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn0iLCJpbXBvcnQgc3RhcnRPZkRheSBmcm9tIFwiLi4vc3RhcnRPZkRheS9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mVG9kYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiB0b2RheS5cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIHRvZGF5LlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIHRvZGF5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZlRvZGF5KClcbiAqIC8vPT4gTW9uIE9jdCA2IDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlRvZGF5KCkge1xuICByZXR1cm4gc3RhcnRPZkRheShEYXRlLm5vdygpKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCB7IGNvbXBhcmVBc2MsIGZvcm1hdCwgcGFyc2VJU08sIHN0YXJ0T2ZUb2RheSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IGNsZWFyRm9ybSB9IGZyb20gJy4vZG9tTWFuaXAnO1xuaW1wb3J0IHsgc2F2ZVRvRG9Ub0xvY2FsIH0gZnJvbSAnLi9tYW5hZ2UtbG9jYWwtc3RvcmFnZS5qcyc7XG5cbi8vQ3JlYXRpbmcgYW4gYXJyYXkgZm9yIHRoZSBUb0RvXG5sZXQgdG9Eb0FycmF5ID0gW107XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVUb0RvID0gKCkgPT4ge1xuICAgIGxldCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLnZhbHVlO1xuICAgIGxldCBsaXN0VHlwZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaXN0LXR5cGUnKS52YWx1ZTtcbiAgICBsZXQgZHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdWVkYXRlJykudmFsdWU7XG4gICAgbGV0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWU7XG5cbiAgICAvL0NoZWNrIHRvIHNlZSBpZiBlbXB0eSBmaWVsZHMgZXhpc3RcbiAgICBpZiAodGl0bGUgPT0gXCJcIiB8fCBkdWVEYXRlID09IFwiXCIpIHtcbiAgICAgICAgYWxlcnQoJ1RpdGxlLCBOb3RlcywgYW5kIER1ZSBEYXRlIGFyZSByZXF1aXJlZCBmaWVsZHMsIHBsZWFzZSB0cnkgYWdhaW4hJylcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL0NoZWNrIHRvIHNlZSBpZiBwcmUtZGF0ZSB3YXMgZW50ZXJlZFxuICAgIGlmIChwYXJzZUlTTyhkdWVEYXRlKSA8IHN0YXJ0T2ZUb2RheSgpKSB7XG4gICAgICAgIGFsZXJ0KCdZb3UgaGF2ZSBlbnRlcmVkIGEgZGF0ZSB0aGF0IGhhcyBhbHJlYWR5IHBhc3NlZCEgUGxlYXNlIGVudGVyIGEgZGF0ZSBncmVhdGVyIHRoYW4gdGhhdC4nKVxuICAgICAgICBjb25zb2xlLmxvZygnZHVlIGRhdGUnLCBwYXJzZUlTTyhkdWVEYXRlKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRlIG5vdycsIHN0YXJ0T2ZUb2RheSgpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL0xvb3Agb3ZlciB0aGUgbm9kZWxpc3QgZm9yIG5vdGVzIGxpc3QgaXRlbXMgZnJvbSB0aGUgRE9NIGFuZCBmb3JtYXQgdG8gc3RyaW5nXG4gICAgY29uc3Qgbm9kZUxpc3ROb3RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG4gICAgbGV0IG5vdGVzTGlzdEFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlTGlzdE5vdGVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgLy9TdHJpcCBvZmYgdGhlIFwieFwiIGZyb20gdGhlIGVuZCBvZiB0aGUgbGkgdGhlbiBwdXNoIHRvIHRlbXAgYXJyYXlcbiAgICAgICAgbGV0IHN0cmlwcGVkTm90ZXNMaXN0ID0gbm9kZUxpc3ROb3Rlc1tpXS50ZXh0Q29udGVudC5yZXBsYWNlKCdcXHUwMEQ3JywgXCJcIik7XG4gICAgICAgIG5vdGVzTGlzdEFycmF5LnB1c2goc3RyaXBwZWROb3Rlc0xpc3QpO1xuICAgIH1cbiAgICAvL1N0cmlwIG9mZiB0aGUgbm90ZXMgbGlzdCBhcnJheSBhbmQgY29udmVydCB0byBzdHJpbmcgd2l0aCBjb21tYXNcbiAgICBsZXQgbm90ZXMgPSBub3Rlc0xpc3RBcnJheS5qb2luKFwiLCBcIik7XG5cbiAgICBjb25zb2xlLmxvZygnY2FsbGVkIGNyZWF0ZVRvRE8gbW9kdWxlLi4gY3JlYXRpbmcgdG9kbyBub3cnKTtcbiAgICBjb25zb2xlLmxvZyh7dGl0bGUsIG5vdGVzLCBkdWVEYXRlLCBwcmlvcml0eSwgbGlzdFR5cGUgfSk7XG4gICAgY29uc29sZS5sb2coJ3B1c2hpbmcgdGhpcyBvYmplY3QgdG8gdGhlIHRvRG8gYXJyYXkuLi4nKTtcbiAgICAvL1RPRE86IHJlbW92ZSBiZWxvdyB0d28gbGluZXMgaWYgYXJyYXkgaXMgbm90IG5lZWRlZFxuICAgIHRvRG9BcnJheS5wdXNoKHt0aXRsZSwgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX0pO1xuICAgIGNvbnNvbGUubG9nKHRvRG9BcnJheSk7XG5cbiAgICAvL0NhbGwgc3RvcmFnZSBtb2R1bGUgYW5kIHB1c2ggb2JqZWN0IHRvIGxvY2FsIHN0b3JhZ2VcbiAgICBzYXZlVG9Eb1RvTG9jYWwoe3RpdGxlLCBub3RlcywgZHVlRGF0ZSwgcHJpb3JpdHksIGxpc3RUeXBlfSk7XG5cbiAgICAvL1Jlc2V0IHRoZSBmb3JtIGFmdGVyIHN1Y2Nlc3NmdWwgc3VibWlzc2lvblxuICAgIGNsZWFyRm9ybSgpO1xuXG4gICAgcmV0dXJuIHt0aXRsZSwgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX07XG5cbn1cbiAgICBcbiIsImltcG9ydCB7IGRpc3BsYXlUb0RvIH0gZnJvbSAnLi9kb21NYW5pcC5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlVG9Eb1RvTG9jYWwgKHt0aXRsZSwgbm90ZXMsIGR1ZURhdGUsIHByaW9yaXR5LCBsaXN0VHlwZX0pIHtcbiAgICBjb25zb2xlLmxvZygnc2F2aW5nIG9iamVjdCB0byBsb2NhbCBzdG9yYWdlJyk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1RpdGxlJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdMaXN0LVR5cGUnLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdC10eXBlJykudmFsdWUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdEdWVEYXRlJywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1ZWRhdGUnKS52YWx1ZSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1ByaW9yaXR5JywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWUpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdOb3RlcycsIG5vdGVzKTtcbiAgICBkaXNwbGF5VG9EbygpO1xuICAgIHJldHVybiB7dGl0bGUsIG5vdGVzLCBkdWVEYXRlLCBwcmlvcml0eSwgbGlzdFR5cGV9O1xufSIsIi8vRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgYmxhbmsgcHJqZWN0IGFycmF5IGxpc3RcblxuZXhwb3J0IGNvbnN0IHByb2plY3RMb2FkID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCd0ZXN0aW5nJyk7XG4gICAgbGV0IHByb2plY3RBcnJheSA9IFtdO1xuICAgIGNvbnNvbGUubG9nKCdwdXNoaW5nIHRpdGxlIG9mIHByb2plY3QnKTtcbiAgICBsZXQgcHJvamVjdFRpdGxlID0gJ0RlZmF1bHQgcHJvamVjdCc7XG4gICAgcHJvamVjdEFycmF5LnB1c2goe3Byb2plY3RUaXRsZX0pO1xuICAgIGNvbnNvbGUubG9nKHByb2plY3RBcnJheSk7XG4gICAgcmV0dXJuIHtwcm9qZWN0QXJyYXksIHByb2plY3RUaXRsZX07XG59IiwiLy9pbXBvcnQgc2VwZXJhdGUgbW9kdWxlc1xuaW1wb3J0IHsgcHJvamVjdExvYWQgfSBmcm9tIFwiLi9wcm9qZWN0TG9hZFwiO1xuaW1wb3J0IHsgZGlzcGxheURlZmF1bHRQcm9qZWN0LCBkaXNwbGF5Rm9ybSwgYWRkTm90ZXNMaXN0LCBjbGVhckZvcm0gfSBmcm9tIFwiLi9kb21NYW5pcFwiO1xuaW1wb3J0IHsgY3JlYXRlVG9EbyB9IGZyb20gXCIuL2NyZWF0ZVRvRG9cIjtcblxuXG4vL0NhbGwgdGhlIHByb2plY3QgbG9hZCBvbiBmaXJzdCBsYW5kXG5wcm9qZWN0TG9hZCgpO1xuXG4vL0NhbGwgRE9NIG1hbmlwdWxhdGlvbiB0byBjb250cm9sIFVJXG5cbi8vQ2xpY2sgZXZlbnRzIGZvciBwcm9qZWN0IGNyZWF0aW9uIGFuZCByZXZlcnRpbmdcbmxldCBjbGlja0V2ZW50TW9kdWxlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLy9DbGljayBldmVudCBmb3IgZGlzcGxheWluZyB0aGUgZm9ybVxuICAgIGNvbnN0IGFkZE5ld1RvRG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8tYnV0dG9uJyk7XG4gICAgYWRkTmV3VG9Eby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRpc3BsYXlGb3JtKTtcblxuICAgIC8vQ2xpY2sgZXZlbnQgZm9yIGFkZGluZyBhbiBpdGVtIHRvIHRoZSBub3RlcyBvbiBmb3JtXG4gICAgY29uc3QgYWRkTm90ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLW5vdGVzJyk7XG4gICAgYWRkTm90ZXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhZGROb3Rlc0xpc3QpO1xuXG4gICAgLy9DbGljayBldmVuIHRvIGNsZWFyIHRoZSBmb3JtXG4gICAgY29uc3QgY2xlYXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzZXQtYnV0dG9uJyk7XG4gICAgY2xlYXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGVhckZvcm0pO1xuXG4gICAgLy9DbGljayBldmVudCB0byBzdWJtaXQgYSBuZXcgdG9kbyBmb3JtIHRvIHByb2plY3RcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3VibWl0LWJ1dHRvbicpO1xuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNyZWF0ZVRvRG8pO1xufSkoKTtcblxuLy9jb25zdCBteVRvRG8gPSBjcmVhdGVUb0RvKFwiR3JvY2VyeSBSdW5cIiwgXCJnbyBnZXQgdGhlIGdyb2Nlcmllc1wiLCBcIjYvMTEvMjAyM1wiLCBcIkxvd1wiLCBcIkdyb2NlcnkgTGlzdFwiKTtcbi8vY29uc3QgbXlUb0RvMiA9IGNyZWF0ZVRvRG8oXCJIb21ld29ya1wiLCBcIkJpb2xvZ3lcIiwgXCIxMS8xNy8yMDIzXCIsIFwiTWVkaXVtXCIsIFwiUmVtaW5kZXJzXCIpO1xuLy9jb25zb2xlLmxvZyhcInNob3cgcHJvcGVydGllcyBmcm9tIGluZGV4LmpzXCIsIG15VG9Ebyk7XG4vL2NvbnNvbGUubG9nKFwic2hvdyBwcm9wZXJ0aWVzIGZyb20gaW5kZXguanNcIiwgbXlUb0RvMik7XG4iXSwibmFtZXMiOlsiZGlzcGxheUZvcm0iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5IiwicXVlcnlTZWxlY3RvciIsInZpc2liaWxpdHkiLCJhZGROb3Rlc0xpc3QiLCJhZGRJdGVtIiwidmFsdWUiLCJ1bCIsImxpIiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50Iiwic3BhbiIsImNsYXNzTmFtZSIsInJlbW92ZUljb24iLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJub2RlTGlzdE5vdGVzIiwiZm9yRWFjaCIsImNoZWNrTm90ZXNJdGVtIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsImNsZWFyRm9ybSIsImkiLCJyZXNldCIsIk1hdGgiLCJwb3ciLCJtaWxsaXNlY29uZHNJbkhvdXIiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJwYXJzZUlTTyIsImFyZ3VtZW50Iiwib3B0aW9ucyIsIl9vcHRpb25zJGFkZGl0aW9uYWxEaSIsImFyZ3VtZW50cyIsImFkZGl0aW9uYWxEaWdpdHMiLCJkaXJ0eU51bWJlciIsIk5hTiIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiY2VpbCIsImZsb29yIiwidG9JbnRlZ2VyIiwiUmFuZ2VFcnJvciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIkRhdGUiLCJkYXRlIiwiZGF0ZVN0cmluZ3MiLCJkYXRlU3RyaW5nIiwidGltZVN0cmluZyIsImFycmF5Iiwic3BsaXQiLCJwYXR0ZXJucyIsImRhdGVUaW1lRGVsaW1pdGVyIiwidGVzdCIsInRpbWVab25lRGVsaW1pdGVyIiwic3Vic3RyIiwidG9rZW4iLCJ0aW1lem9uZSIsImV4ZWMiLCJ0aW1lIiwicmVwbGFjZSIsInNwbGl0RGF0ZVN0cmluZyIsInBhcnNlWWVhclJlc3VsdCIsInJlZ2V4IiwiUmVnRXhwIiwiY2FwdHVyZXMiLCJtYXRjaCIsInllYXIiLCJyZXN0RGF0ZVN0cmluZyIsInBhcnNlSW50IiwiY2VudHVyeSIsInNsaWNlIiwicGFyc2VZZWFyIiwiZGF0ZVJlZ2V4IiwiaXNXZWVrRGF0ZSIsImRheU9mWWVhciIsInBhcnNlRGF0ZVVuaXQiLCJtb250aCIsImRheSIsIndlZWsiLCJkYXlPZldlZWsiLCJfeWVhciIsInZhbGlkYXRlV2Vla0RhdGUiLCJpc29XZWVrWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZGlmZiIsImdldFVUQ0RheSIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwiZGF5T2ZJU09XZWVrWWVhciIsImRheXNJbk1vbnRocyIsImlzTGVhcFllYXJJbmRleCIsInZhbGlkYXRlRGF0ZSIsInZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSIsIm1heCIsInBhcnNlRGF0ZSIsImdldFRpbWUiLCJvZmZzZXQiLCJ0aW1lc3RhbXAiLCJ0aW1lUmVnZXgiLCJob3VycyIsInBhcnNlVGltZVVuaXQiLCJtaW51dGVzIiwic2Vjb25kcyIsInZhbGlkYXRlVGltZSIsInBhcnNlVGltZSIsImRpcnR5RGF0ZSIsInJlc3VsdCIsInNldEZ1bGxZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsInNldEhvdXJzIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInRpbWV6b25lU3RyaW5nIiwidGltZXpvbmVSZWdleCIsInNpZ24iLCJfaG91cnMiLCJ2YWxpZGF0ZVRpbWV6b25lIiwicGFyc2VUaW1lem9uZSIsInBhcnNlRmxvYXQiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJzdGFydE9mVG9kYXkiLCJhcmdTdHIiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsInRvRGF0ZSIsInN0YXJ0T2ZEYXkiLCJub3ciLCJ0b0RvQXJyYXkiLCJjcmVhdGVUb0RvIiwidGl0bGUiLCJsaXN0VHlwZSIsImR1ZURhdGUiLCJwcmlvcml0eSIsImFsZXJ0Iiwibm90ZXNMaXN0QXJyYXkiLCJzdHJpcHBlZE5vdGVzTGlzdCIsInB1c2giLCJub3RlcyIsImpvaW4iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlRGl2cyIsInByb2plY3RzIiwiY2FyZCIsImNsYXNzTGlzdCIsImFkZCIsImdldEl0ZW0iLCJfZGlzcGxheUFycmF5Iiwia2V5IiwicGFyYSIsImRpc3BsYXlUb0RvIiwic2F2ZVRvRG9Ub0xvY2FsIiwicHJvamVjdEFycmF5IiwicHJvamVjdFRpdGxlIl0sInNvdXJjZVJvb3QiOiIifQ==